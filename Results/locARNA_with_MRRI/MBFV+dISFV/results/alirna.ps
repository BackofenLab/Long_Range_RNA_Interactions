%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Fri Jan 26 12:25:41 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________UUAAAAGGUUUUUAGAACAGUGGAUA_____AUGUCU___AAAAAACCAGGAAGGCCC___GGCAAAAACCGGGCUGUCAAUAUGCUAAAACGCGGAGUACCCCGCG______________C_CCCACAAAAA_A_AACAGCAUAUUGACACCUGGGAA__AGACCAGAGGAUCUUCUGCUUUU__________________\
) } def
/len { sequence length } bind def

/coor [
[74.55826569 560.83569336]
[61.59767151 568.40014648]
[48.12502670 575.00964355]
[34.21057129 580.62976074]
[19.92685318 585.23114014]
[5.34833765 588.78991699]
[-9.44896603 591.28741455]
[-24.38791275 592.71069336]
[-39.39061356 593.05224609]
[-54.37885666 592.31036377]
[-69.27449036 590.48889160]
[-83.99986267 587.59735107]
[-98.47820282 583.65075684]
[-112.63402557 578.66973877]
[-126.39351654 572.68023682]
[-139.68495178 565.71350098]
[-152.43904114 557.80584717]
[-164.58926392 548.99847412]
[-176.07231140 539.33734131]
[-186.82827759 528.87280273]
[-196.80111694 517.65942383]
[-205.93881226 505.75561523]
[-214.19372559 493.22348022]
[-221.52284241 480.12838745]
[-227.88792419 466.53854370]
[-233.25579834 452.52484131]
[-237.59848022 438.16033936]
[-240.89332581 423.51992798]
[-243.12315369 408.67993164]
[-244.27635193 393.71771240]
[-244.34689331 378.71130371]
[-243.33441162 363.73889160]
[-241.24418640 348.87860107]
[-238.08712769 334.20785522]
[-233.87968445 319.80316162]
[-228.64378357 305.73962402]
[-222.40675354 292.09054565]
[-215.20106506 278.92712402]
[-207.06433105 266.31793213]
[-198.03895569 254.32876587]
[-188.17198181 243.02210999]
[-177.51486206 232.45690918]
[-166.12315369 222.68823242]
[-154.05625916 213.76704407]
[-141.37707520 205.73982239]
[-128.15173340 198.64843750]
[-114.44915009 192.52984619]
[-100.34078217 187.41596985]
[-85.90018463 183.33345032]
[-71.20265198 180.30357361]
[-56.32479477 178.34214783]
[-41.34418869 177.45939636]
[-26.33893967 177.65991211]
[-11.38727283 178.94267273]
[3.43285632 181.30094910]
[18.04418373 184.72248840]
[32.37052917 189.18942261]
[46.33720398 194.67848206]
[52.81669998 181.15013123]
[59.29619598 167.62179565]
[52.05949402 154.63070679]
[53.88166809 139.69271851]
[64.27195740 128.56188965]
[79.39895630 125.64984131]
[85.87844849 112.12149811]
[81.91413879 104.38754272]
[81.89389801 95.69677734]
[85.82212830 87.94443512]
[92.84219360 82.82110596]
[101.42318726 81.44404602]
[108.50029755 68.21852112]
[97.60438538 55.33710098]
[92.50299072 39.29377747]
[93.95178223 22.55828667]
[101.70037842 7.69554663]
[114.53501892 -3.02743626]
[130.46865845 -7.98734665]
[147.04856873 -6.45026350]
[153.72875977 -19.88064003]
[160.40895081 -33.31101608]
[167.08915710 -46.74139023]
[173.76934814 -60.17176819]
[174.78919983 -69.24908447]
[180.65028381 -73.75125885]
[187.52969360 -87.08068848]
[194.40910339 -100.41011810]
[201.28851318 -113.73954773]
[208.16793823 -127.06897736]
[215.04734802 -140.39840698]
[221.92675781 -153.72782898]
[228.80616760 -167.05726624]
[235.68557739 -180.38668823]
[242.56500244 -193.71612549]
[249.44441223 -207.04554749]
[256.32382202 -220.37498474]
[243.86836243 -228.76414490]
[232.47106934 -238.54260254]
[222.28607178 -249.57810974]
[213.45112610 -261.72143555]
[206.08569336 -274.80831909]
[200.28939819 -288.66183472]
[196.14062500 -303.09457397]
[193.69548035 -317.91137695]
[192.98703003 -332.91186523]
[194.02487183 -347.89315796]
[196.79493713 -362.65267944]
[201.25979614 -376.99081421]
[207.35903931 -390.71362305]
[215.01020813 -403.63555908]
[224.10981750 -415.58181763]
[234.53479004 -426.39093018]
[246.14416504 -435.91662598]
[258.78091431 -444.03012085]
[272.27416992 -450.62167358]
[286.44143677 -455.60217285]
[301.09109497 -458.90423584]
[316.02508545 -460.48318481]
[331.04138184 -460.31771851]
[345.93692017 -458.41003418]
[360.51025391 -454.78594971]
[374.56433105 -449.49450684]
[387.90905762 -442.60717773]
[400.36395264 -434.21719360]
[411.76058960 -424.43798828]
[421.94485474 -413.40179443]
[430.77899170 -401.25787354]
[438.14355469 -388.17050171]
[443.93893433 -374.31658936]
[448.08673096 -359.88357544]
[450.53088379 -345.06661987]
[451.23834229 -330.06607056]
[450.19949341 -315.08483887]
[447.42843628 -300.32550049]
[442.96264648 -285.98770142]
[436.86245728 -272.26528931]
[429.21044922 -259.34387207]
[420.11004639 -247.39819336]
[409.68432617 -236.58979797]
[398.07434082 -227.06486511]
[385.43704224 -218.95222473]
[371.94332886 -212.36155701]
[357.77575684 -207.38201904]
[343.12585449 -204.08093262]
[328.19177246 -202.50296021]
[313.17550659 -202.66943359]
[298.28005981 -204.57810974]
[283.70697021 -208.20315552]
[269.65325928 -213.49557495]
[262.77383423 -200.16613770]
[255.89442444 -186.83671570]
[249.01501465 -173.50727844]
[242.13560486 -160.17785645]
[235.25617981 -146.84841919]
[228.37677002 -133.51899719]
[221.49736023 -120.18955994]
[214.61795044 -106.86013031]
[207.73854065 -93.53070831]
[200.85913086 -80.20127869]
[193.97970581 -66.87184906]
[187.19972229 -53.49157333]
[180.51953125 -40.06119537]
[173.83932495 -26.63082123]
[167.15913391 -13.20044518]
[160.47894287 0.22993113]
[169.80842590 9.65087414]
[175.79129028 21.50850868]
[177.83276367 34.65522385]
[175.72030640 47.81378937]
[169.64562988 59.70144653]
[160.18740845 69.15495300]
[148.25614929 75.24440002]
[135.00656128 77.36469269]
[121.72582245 75.29563141]
[114.64871216 88.52115631]
[116.60086060 108.41191101]
[99.40679932 118.60099030]
[92.92729950 132.12933350]
[100.14006805 145.74118042]
[97.97997284 160.81391907]
[87.48286438 171.59698486]
[72.82453918 174.10128784]
[66.34504700 187.62963867]
[59.86555099 201.15797424]
[72.89691925 208.59982300]
[85.35733795 216.96258545]
[97.18182373 226.20268250]
[108.30874634 236.27191162]
[118.68007660 247.11779785]
[128.24176025 258.68377686]
[136.94393921 270.90957642]
[144.74124146 283.73141479]
[151.59301758 297.08248901]
[157.46354675 310.89315796]
[162.32220459 325.09143066]
[166.14369202 339.60330200]
[168.90806580 354.35305786]
[170.60092163 369.26385498]
[171.21342468 384.25796509]
[170.74238586 399.25714111]
[169.19026184 414.18325806]
[166.56513977 428.95846558]
[162.88072205 443.50570679]
[158.15618896 457.74920654]
[152.41619873 471.61462402]
[145.69067383 485.02972412]
[138.01466370 497.92456055]
[129.42820740 510.23190308]
[119.97605133 521.88757324]
[109.70748138 532.83081055]
[98.67604065 543.00451660]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[58 183]
[59 182]
[60 181]
[64 177]
[65 176]
[70 174]
[71 173]
[78 164]
[79 163]
[80 162]
[81 161]
[82 160]
[84 159]
[85 158]
[86 157]
[87 156]
[88 155]
[89 154]
[90 153]
[91 152]
[92 151]
[93 150]
[94 149]
[95 148]
] def

init

% Start Annotations
86 157 0.0 0.2 colorpair
91 152 0.0 1 colorpair
92 151 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
58 183 3 gmark
58 cmark
183 cmark
59 182 11 gmark
182 cmark
60 181 12 gmark
60 cmark
181 cmark
64 177 13 gmark
64 cmark
177 cmark
65 176 9 gmark
70 174 3 gmark
174 cmark
71 173 11 gmark
78 164 8 gmark
78 cmark
79 163 5 gmark
80 162 9 gmark
80 cmark
162 cmark
81 161 6 gmark
161 cmark
82 160 10 gmark
160 cmark
84 159 8 gmark
84 cmark
159 cmark
85 158 9 gmark
86 157 2 gmark
87 156 4 gmark
88 155 4 gmark
88 cmark
155 cmark
89 154 4 gmark
90 153 3 gmark
153 cmark
92 151 1 gmark
93 150 3 gmark
93 cmark
150 cmark
94 149 3 gmark
94 cmark
149 cmark
95 148 5 gmark

% End Annotations
showpage
end
%%EOF
