%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Sun Jan 28 18:36:55 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________UUGAAUAGUUUUUUAGCAAAU_UCAUUACCAAUGUCU___AAA___AAACCAGGAAGGCCCGGUGGAAACCGGGCUGUCAAUAUGCUAAAACGCGGAAUACCCCGCG______________ACCCGCAAA_AAAAAACAGCAUAUUGACACCUGGGAA_AAGACCAGGGGAUCUUCUGC_UUUU_________________\
) } def
/len { sequence length } bind def

/coor [
[12.71255684 719.65045166]
[-1.88038826 723.13464355]
[-16.62886810 725.88720703]
[-31.49621582 727.90112305]
[-46.44546890 729.17144775]
[-61.43946075 729.69506836]
[-76.44091797 729.47064209]
[-91.41253662 728.49871826]
[-106.31709290 726.78173828]
[-121.11754608 724.32397461]
[-135.77708435 721.13153076]
[-150.25927734 717.21234131]
[-164.52810669 712.57611084]
[-178.54809570 707.23437500]
[-192.28439331 701.20050049]
[-205.70286560 694.48937988]
[-218.77012634 687.11779785]
[-231.45368958 679.10400391]
[-243.72204590 670.46795654]
[-255.54467773 661.23107910]
[-266.89218140 651.41638184]
[-277.73635864 641.04827881]
[-288.05026245 630.15252686]
[-297.80822754 618.75622559]
[-306.98599243 606.88763428]
[-315.56076050 594.57635498]
[-323.51119995 581.85296631]
[-330.81753540 568.74914551]
[-337.46160889 555.29736328]
[-343.42694092 541.53112793]
[-348.69863892 527.48468018]
[-353.26364136 513.19287109]
[-357.11056519 498.69134521]
[-360.22985840 484.01605225]
[-362.61380005 469.20352173]
[-364.25640869 454.29058838]
[-365.15362549 439.31430054]
[-365.30322266 424.31192017]
[-364.70483398 409.32073975]
[-363.35992432 394.37799072]
[-361.27188110 379.52087402]
[-358.44583130 364.78631592]
[-354.88885498 350.21093750]
[-350.60977173 335.83096313]
[-345.61923218 321.68215942]
[-339.92962646 307.79971313]
[-333.55511475 294.21813965]
[-326.51153564 280.97116089]
[-318.81640625 268.09176636]
[-310.48886108 255.61195374]
[-301.54959106 243.56274414]
[-292.02081299 231.97410583]
[-281.92626953 220.87483215]
[-271.29098511 210.29252625]
[-260.14144897 200.25350952]
[-248.50538635 190.78273010]
[-236.41168213 181.90373230]
[-223.89044189 173.63859558]
[-210.97277832 166.00787354]
[-197.69082642 159.03051758]
[-184.07757568 152.72389221]
[-170.16688538 147.10368347]
[-155.99336243 142.18383789]
[-141.59220886 137.97660828]
[-126.99924469 134.49244690]
[-112.25074768 131.74000549]
[-97.38338470 129.72615051]
[-82.43412781 128.45587158]
[-67.44013214 127.93234253]
[-52.43868256 128.15684509]
[-37.46706772 129.12882996]
[-22.56251526 130.84588623]
[-7.76207781 133.30374146]
[6.89744711 136.49627686]
[21.37961388 140.41557312]
[35.64841843 145.05186462]
[49.66838455 150.39363098]
[63.40465546 156.42759705]
[70.11434937 143.01194763]
[76.82405090 129.59628296]
[83.53374481 116.18061829]
[90.24344635 102.76496124]
[90.74600983 94.71941376]
[97.15517426 89.19992065]
[104.06481171 75.88613892]
[110.97444916 62.57234955]
[117.88408661 49.25856018]
[124.79372406 35.94477463]
[131.70335388 22.63098717]
[138.61299133 9.31720066]
[145.52262878 -3.99658585]
[152.43226624 -17.31037331]
[159.34190369 -30.62415886]
[166.25154114 -43.93794632]
[173.16117859 -57.25173187]
[160.74272156 -65.69673920]
[149.41026306 -75.55127716]
[139.32290649 -86.67699432]
[130.62225342 -98.91770935]
[123.43046570 -112.10157776]
[117.84848022 -126.04352570]
[113.95467377 -140.54782104]
[111.80371094 -155.41085815]
[111.42578125 -170.42396545]
[112.82618713 -185.37638855]
[115.98528290 -200.05824280]
[120.85870361 -214.26338196]
[127.37804413 -227.79240417]
[135.45178223 -240.45538330]
[144.96656799 -252.07455444]
[155.78884888 -262.48681641]
[167.76666260 -271.54595947]
[180.73188782 -279.12481689]
[194.50251770 -285.11700439]
[208.88520813 -289.43841553]
[223.67805481 -292.02838135]
[238.67340088 -292.85052490]
[253.66073608 -291.89328003]
[268.42965698 -289.17013550]
[282.77282715 -284.71929932]
[296.48889160 -278.60327148]
[309.38528442 -270.90786743]
[321.28097534 -261.74114990]
[332.00900269 -251.23182678]
[341.41870117 -239.52738953]
[349.37799072 -226.79216003]
[355.77517700 -213.20494080]
[360.52038574 -198.95646667]
[363.54705811 -184.24674988]
[364.81268311 -169.28230286]
[364.29946899 -154.27320862]
[362.01467896 -139.43016052]
[357.99032593 -124.96154022]
[352.28292847 -111.07046509]
[344.97262573 -97.95193481]
[336.16204834 -85.79011536]
[325.97482300 -74.75574493]
[314.55404663 -65.00373077]
[302.05999756 -56.67096710]
[288.66806030 -49.87443924]
[274.56628418 -44.70956039]
[259.95260620 -41.24883270]
[245.03216553 -39.54084015]
[230.01446533 -39.60956573]
[215.11029053 -41.45404053]
[200.52888489 -45.04837036]
[186.47496033 -50.34209824]
[179.56532288 -37.02830887]
[172.65570068 -23.71452332]
[165.74606323 -10.40073586]
[158.83642578 2.91305089]
[151.92678833 16.22683716]
[145.01715088 29.54062462]
[138.10751343 42.85441208]
[131.19787598 56.16819763]
[124.28823853 69.48198700]
[117.37860107 82.79576874]
[110.46896362 96.10955811]
[103.65910339 109.47465515]
[96.94940948 122.89031982]
[90.23970795 136.30598450]
[83.53001404 149.72163391]
[76.82031250 163.13729858]
[89.88761902 170.50885010]
[102.57122803 178.52258301]
[114.83962250 187.15856934]
[126.66230011 196.39537048]
[138.00985718 206.20999146]
[148.85409546 216.57804871]
[159.16804504 227.47375488]
[168.92607117 238.87002563]
[178.10389709 250.73852539]
[186.67872620 263.04974365]
[194.62922668 275.77310181]
[201.93563843 288.87692261]
[208.57980347 302.32864380]
[214.54518127 316.09484863]
[219.81695557 330.14129639]
[224.38203430 344.43304443]
[228.22903442 358.93457031]
[231.34841919 373.60983276]
[233.73242188 388.42236328]
[235.37510681 403.33529663]
[236.27241516 418.31155396]
[236.42208862 433.31393433]
[235.82377625 448.30514526]
[234.47895813 463.24786377]
[232.39097595 478.10501099]
[229.56501770 492.83959961]
[226.00810242 507.41500854]
[221.72909546 521.79498291]
[216.73861694 535.94378662]
[211.04908752 549.82629395]
[204.67465210 563.40789795]
[197.63113403 576.65490723]
[189.93608093 589.53436279]
[181.60858154 602.01422119]
[172.66938782 614.06347656]
[163.14068604 625.65216064]
[153.04617310 636.75146484]
[142.41096497 647.33380127]
[131.26148987 657.37292480]
[119.62545776 666.84375000]
[107.53180695 675.72277832]
[95.01061249 683.98803711]
[82.09299469 691.61877441]
[68.81106567 698.59625244]
[55.19785309 704.90289307]
[41.28719711 710.52319336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[78 163]
[79 162]
[80 161]
[81 160]
[82 159]
[84 158]
[85 157]
[86 156]
[87 155]
[88 154]
[89 153]
[90 152]
[91 151]
[92 150]
[93 149]
[94 148]
[95 147]
] def

init

% Start Annotations
86 156 0.0 0.2 colorpair
87 155 0.16 0.2 colorpair
88 154 0.16 0.2 colorpair
89 153 0.0 0.6 colorpair
90 152 0.0 0.6 colorpair
91 151 0.0 0.6 colorpair
92 150 0.16 1 colorpair
93 149 0.16 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
78 163 11 gmark
78 cmark
79 162 8 gmark
79 cmark
162 cmark
80 161 9 gmark
80 cmark
161 cmark
81 160 12 gmark
160 cmark
82 159 10 gmark
84 158 7 gmark
84 cmark
158 cmark
85 157 9 gmark
86 156 2 gmark
87 155 2 gmark
87 cmark
88 154 2 gmark
88 cmark
154 cmark
89 153 1 gmark
90 152 1 gmark
91 151 1 gmark
150 cmark
93 149 2 gmark
93 cmark
149 cmark
94 148 3 gmark
94 cmark
148 cmark
95 147 4 gmark

% End Annotations
showpage
end
%%EOF
