%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Fri Feb  2 16:00:59 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______UGAGAACAGUUUUUAGGAACAGGUGAUU______AUG__________C_AAAAAACAAGGAAGGCCCGGAGGAAACCGGGCUGUCAAUAUGCUAAAACGCGCGACAACCCGCG______________ACGCGAAAACCCAAA_CAGCAUAUUGACAC_CUGGGA__AAGACCAGAGAAUCUUCUGCCUC___________________\
) } def
/len { sequence length } bind def

/coor [
[171.16751099 436.32754517]
[156.42938232 439.11172485]
[141.58384705 441.25036621]
[126.65914154 442.73944092]
[111.68369293 443.57608032]
[96.68600464 443.75869751]
[81.69461823 443.28695679]
[66.73808289 442.16177368]
[51.84486389 440.38525391]
[37.04330826 437.96078491]
[22.36159706 434.89297485]
[7.82767248 431.18768311]
[-6.53079605 426.85198975]
[-20.68647766 421.89407349]
[-34.61242676 416.32345581]
[-48.28213120 410.15066528]
[-61.66957474 403.38751221]
[-74.74927521 396.04681396]
[-87.49632263 388.14260864]
[-99.88646698 379.68988037]
[-111.89611053 370.70477295]
[-123.50240326 361.20434570]
[-134.68324280 351.20669556]
[-145.41735840 340.73086548]
[-155.68429565 329.79678345]
[-165.46453857 318.42529297]
[-174.73944092 306.63800049]
[-183.49137878 294.45736694]
[-191.70365906 281.90658569]
[-199.36067200 269.00952148]
[-206.44783020 255.79074097]
[-212.95166016 242.27540588]
[-218.85975647 228.48922729]
[-224.16088867 214.45848083]
[-228.84497070 200.20985413]
[-232.90307617 185.77046204]
[-236.32746887 171.16781616]
[-239.11166382 156.42968750]
[-241.25033569 141.58413696]
[-242.73941040 126.65943909]
[-243.57606506 111.68399048]
[-243.75871277 96.68630219]
[-243.28698730 81.69492340]
[-242.16178894 66.73838043]
[-240.38528442 51.84516144]
[-237.96083069 37.04360580]
[-234.89305115 22.36188889]
[-231.18777466 7.82796144]
[-226.85208130 -6.53051138]
[-221.89419556 -20.68619728]
[-216.32356262 -34.61215210]
[-210.15080261 -48.28186417]
[-203.38764954 -61.66931152]
[-196.04696655 -74.74901581]
[-188.14276123 -87.49607086]
[-179.69004822 -99.88622284]
[-170.70494080 -111.89587402]
[-161.20452881 -123.50217438]
[-151.20689392 -134.68302917]
[-140.73107910 -145.41714478]
[-129.79701233 -155.68409729]
[-118.42552185 -165.46434021]
[-106.63824463 -174.73925781]
[-94.45761871 -183.49119568]
[-81.90683746 -191.70350647]
[-69.00978088 -199.36051941]
[-55.79100418 -206.44769287]
[-42.27567291 -212.95153809]
[-28.48951149 -218.85964966]
[-14.45876408 -224.16079712]
[-0.21013723 -228.84487915]
[14.22924519 -232.90299988]
[28.83189583 -236.32740784]
[43.57001877 -239.11161804]
[58.41556168 -241.25028992]
[73.34026337 -242.73937988]
[88.31571198 -243.57604980]
[103.31340027 -243.75871277]
[118.30477905 -243.28700256]
[133.26132202 -242.16181946]
[148.15454102 -240.38533020]
[162.95610046 -237.96087646]
[177.63781738 -234.89311218]
[192.17175293 -231.18785095]
[206.53022766 -226.85217285]
[220.68591309 -221.89430237]
[234.61187744 -216.32368469]
[248.28158569 -210.15092468]
[261.66903687 -203.38778687]
[269.01031494 -216.46852112]
[276.35159302 -229.54927063]
[283.69284058 -242.63000488]
[291.03411865 -255.71075439]
[298.37539673 -268.79150391]
[305.71664429 -281.87222290]
[313.05792236 -294.95297241]
[320.39920044 -308.03372192]
[327.74044800 -321.11444092]
[335.08172607 -334.19519043]
[322.94604492 -343.04174805]
[311.94186401 -353.26153564]
[302.22366333 -364.71115112]
[293.92791748 -377.22979736]
[287.17105103 -390.64178467]
[282.04791260 -404.75878906]
[278.63043213 -419.38262939]
[276.96661377 -434.30804443]
[277.07977295 -449.32550049]
[278.96832275 -464.22415161]
[282.60580444 -478.79483032]
[287.94107056 -492.83303833]
[294.89929199 -506.14166260]
[303.38275146 -518.53387451]
[313.27236938 -529.83575439]
[324.42932129 -539.88854980]
[336.69696045 -548.55120850]
[349.90304565 -555.70208740]
[363.86224365 -561.24084473]
[378.37854004 -565.08966064]
[393.24816895 -567.19451904]
[408.26235962 -567.52593994]
[423.21038818 -566.07916260]
[437.88235474 -562.87457275]
[452.07232666 -557.95715332]
[465.58108521 -551.39587402]
[478.21899414 -543.28289795]
[489.80859375 -533.73217773]
[500.18722534 -522.87768555]
[509.20919800 -510.87182617]
[516.74786377 -497.88314819]
[522.69732666 -484.09402466]
[526.97412109 -469.69799805]
[529.51818848 -454.89718628]
[530.29382324 -439.89938354]
[529.29016113 -424.91506958]
[526.52124023 -410.15466309]
[522.02593994 -395.82537842]
[515.86743164 -382.12832642]
[508.13211060 -369.25585938]
[498.92855835 -357.38861084]
[488.38601685 -346.69323730]
[476.65246582 -337.31988525]
[463.89260864 -329.40008545]
[450.28564453 -323.04507446]
[436.02249146 -318.34405518]
[421.30346680 -315.36300659]
[406.33517456 -314.14379883]
[391.32775879 -314.70352173]
[376.49185181 -317.03433228]
[362.03579712 -321.10351562]
[348.16247559 -326.85394287]
[340.82119751 -313.77319336]
[333.47991943 -300.69244385]
[326.13867188 -287.61169434]
[318.79739380 -274.53097534]
[311.45611572 -261.45022583]
[304.11486816 -248.36947632]
[296.77359009 -235.28874207]
[289.43231201 -222.20799255]
[282.09106445 -209.12725830]
[274.74978638 -196.04652405]
[287.49682617 -188.14227295]
[299.88696289 -179.68952942]
[311.89657593 -170.70439148]
[323.50286865 -161.20394897]
[334.68368530 -151.20628357]
[345.41778564 -140.73043823]
[355.68469238 -129.79635620]
[365.46490479 -118.42482758]
[374.73980713 -106.63752747]
[383.49169922 -94.45687866]
[391.70397949 -81.90607452]
[399.36096191 -69.00899506]
[406.44812012 -55.79020309]
[412.95190430 -42.27485657]
[418.85998535 -28.48867798]
[424.16110229 -14.45791626]
[428.84515381 -0.20927739]
[432.90322876 14.23011494]
[436.32760620 28.83277512]
[439.11175537 43.57090759]
[441.25039673 58.41645432]
[442.73944092 73.34115601]
[443.57608032 88.31660461]
[443.75869751 103.31430054]
[443.28695679 118.30567932]
[442.16174316 133.26220703]
[440.38519287 148.15542603]
[437.96072388 162.95698547]
[434.89291382 177.63870239]
[431.18762207 192.17262268]
[426.85189819 206.53108215]
[421.89398193 220.68675232]
[416.32333374 234.61270142]
[410.15054321 248.28240967]
[403.38735962 261.66983032]
[396.04666138 274.74954224]
[388.14242554 287.49658203]
[379.68969727 299.88671875]
[370.70455933 311.89636230]
[361.20413208 323.50262451]
[351.20648193 334.68347168]
[340.73065186 345.41757202]
[329.79656982 355.68450928]
[318.42504883 365.46472168]
[306.63775635 374.73962402]
[294.45712280 383.49154663]
[281.90634155 391.70382690]
[269.00924683 399.36080933]
[255.79046631 406.44796753]
[242.27513123 412.95178223]
[228.48895264 418.85986328]
[214.45820618 424.16098022]
[200.20956421 428.84506226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[89 161]
[90 160]
[91 159]
[92 158]
[93 157]
[94 156]
[95 155]
[96 154]
[97 153]
[98 152]
[99 151]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
89 161 17 gmark
89 cmark
161 cmark
90 160 16 gmark
90 cmark
160 cmark
91 159 22 gmark
91 cmark
159 cmark
92 158 15 gmark
92 cmark
158 cmark
93 157 14 gmark
93 cmark
157 cmark
94 156 16 gmark
94 cmark
156 cmark
95 155 14 gmark
95 cmark
155 cmark
96 154 13 gmark
96 cmark
154 cmark
97 153 19 gmark
97 cmark
153 cmark
98 152 21 gmark
98 cmark
152 cmark
99 151 19 gmark
99 cmark
151 cmark

% End Annotations
showpage
end
%%EOF
