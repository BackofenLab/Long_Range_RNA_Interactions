%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Jan  5 18:03:07 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______UUUGAAUAGUUUAAUAGCAGAUAGGA______AUG_________A__AAAAAACCAGGAAAACCCGGCAAAAGCCGGGCUGUCAAUAUGCUAAAGCGCGGAGCGACCCGCG______________ACGCCAACA_ACAAAACAGCAUAUUGACACCUGGGAA_UAGACCGGGAGAUCUUCUGCCUC___________________\
) } def
/len { sequence length } bind def

/coor [
[1.03763616 734.65087891]
[-13.50899410 738.32330322]
[-28.21829987 741.27752686]
[-43.05484390 743.50640869]
[-57.98288345 745.00463867]
[-72.96645355 745.76861572]
[-87.96946716 745.79638672]
[-102.95576477 745.08801270]
[-117.88925934 743.64508057]
[-132.73396301 741.47119141]
[-147.45411682 738.57153320]
[-162.01425171 734.95306396]
[-176.37930298 730.62451172]
[-190.51466370 725.59631348]
[-204.38627625 719.88061523]
[-217.96070862 713.49108887]
[-231.20529175 706.44323730]
[-244.08808899 698.75396729]
[-256.57806396 690.44189453]
[-268.64514160 681.52691650]
[-280.26025391 672.03057861]
[-291.39541626 661.97576904]
[-302.02380371 651.38665771]
[-312.11978149 640.28881836]
[-321.65905762 628.70898438]
[-330.61865234 616.67498779]
[-338.97698975 604.21588135]
[-346.71389771 591.36169434]
[-353.81076050 578.14331055]
[-360.25048828 564.59259033]
[-366.01754761 550.74224854]
[-371.09805298 536.62561035]
[-375.47979736 522.27667236]
[-379.15216064 507.73007202]
[-382.10632324 493.02075195]
[-384.33520508 478.18420410]
[-385.83337402 463.25616455]
[-386.59729004 448.27258301]
[-386.62506104 433.26956177]
[-385.91662598 418.28326416]
[-384.47369385 403.34979248]
[-382.29974365 388.50509644]
[-379.40005493 373.78494263]
[-375.78152466 359.22482300]
[-371.45294189 344.85977173]
[-366.42471313 330.72442627]
[-360.70895386 316.85281372]
[-354.31945801 303.27841187]
[-347.27154541 290.03384399]
[-339.58227539 277.15106201]
[-331.27011108 264.66110229]
[-322.35513306 252.59403992]
[-312.85876465 240.97895813]
[-302.80392456 229.84382629]
[-292.21481323 219.21546936]
[-281.11694336 209.11950684]
[-269.53707886 199.58026123]
[-257.50305176 190.62069702]
[-245.04393005 182.26240540]
[-232.18968201 174.52551270]
[-218.97128296 167.42868042]
[-205.42059326 160.98899841]
[-191.57022095 155.22196960]
[-177.45358276 150.14149475]
[-163.10464478 145.75981140]
[-148.55799866 142.08746338]
[-133.84867859 139.13333130]
[-119.01212311 136.90449524]
[-104.08407593 135.40635681]
[-89.10049438 134.64248657]
[-74.09748840 134.61476135]
[-59.11119080 135.32322693]
[-44.17770767 136.76618958]
[-29.33301544 138.94017029]
[-14.61287594 141.83992004]
[-0.05275251 145.45846558]
[14.31227875 149.78707886]
[28.44761086 154.81533813]
[42.31919098 160.53112793]
[55.89360046 166.92068481]
[62.94003677 153.67880249]
[69.98647308 140.43690491]
[77.03290558 127.19500732]
[84.07933807 113.95310974]
[78.96198273 102.35764313]
[81.38572693 89.91706848]
[90.48177338 81.09073639]
[102.98964691 79.04244995]
[110.23152924 65.90643311]
[117.47341156 52.77040482]
[124.71530151 39.63438034]
[131.95718384 26.49835777]
[139.19906616 13.36233330]
[146.44094849 0.22630870]
[153.68283081 -12.90971565]
[160.92471313 -26.04574013]
[168.16659546 -39.18176270]
[155.96418762 -47.93604279]
[144.88284302 -58.07212448]
[135.07812500 -69.44771576]
[126.68769836 -81.90311432]
[119.82933807 -95.26348114]
[114.59931946 -109.34123993]
[111.07107544 -123.93876648]
[109.29412842 -138.85113525]
[109.29342651 -153.86900330]
[111.06898499 -168.78153992]
[114.59586334 -183.37939453]
[119.82456970 -197.45764160]
[126.68168640 -210.81864929]
[135.07095337 -223.27482605]
[144.87460327 -234.65133667]
[155.95500183 -244.78845215]
[168.15660095 -253.54386902]
[181.30810547 -260.79467773]
[195.22489929 -266.43908691]
[209.71159363 -270.39785767]
[224.56483459 -272.61541748]
[239.57611084 -273.06060791]
[254.53466797 -271.72723389]
[269.23052979 -268.63397217]
[283.45736694 -263.82424927]
[297.01547241 -257.36560059]
[309.71450806 -249.34870911]
[321.37619019 -239.88607788]
[331.83685303 -229.11058044]
[340.94958496 -217.17347717]
[348.58648682 -204.24234009]
[354.64031982 -190.49871826]
[359.02615356 -176.13554382]
[361.68237305 -161.35444641]
[362.57168579 -146.36293030]
[361.68164062 -131.37145996]
[359.02471924 -116.59049225]
[354.63821411 -102.22752380]
[348.58370972 -88.48418427]
[340.94616699 -75.55342102]
[331.83288574 -63.61675644]
[321.37170410 -52.84175873]
[309.70956421 -43.37969589]
[297.01013184 -35.36339569]
[283.45172119 -28.90540314]
[269.22463989 -24.09637260]
[254.52865601 -21.00381470]
[239.57003784 -19.67114639]
[224.55879211 -20.11707687]
[209.70565796 -22.33534241]
[195.21914673 -26.29480553]
[181.30262756 -31.93988037]
[174.06072998 -18.80385590]
[166.81884766 -5.66783237]
[159.57696533 7.46819162]
[152.33508301 20.60421562]
[145.09320068 33.74023819]
[137.85131836 46.87626266]
[130.60943604 60.01228714]
[123.36755371 73.14831543]
[116.12567139 86.28433990]
[121.07220459 102.02951813]
[113.21155548 116.54120636]
[97.32123566 120.99954987]
[90.27480316 134.24143982]
[83.22836304 147.48333740]
[76.18193054 160.72523499]
[69.13549805 173.96711731]
[82.01833344 181.65631104]
[94.50835419 189.96836853]
[106.57548523 198.88327026]
[118.19064331 208.37954712]
[129.32585144 218.43431091]
[139.95426941 229.02333069]
[150.05032349 240.12112427]
[159.58966064 251.70094299]
[168.54931641 263.73486328]
[176.90769958 276.19393921]
[184.64468384 289.04812622]
[191.74160767 302.26647949]
[198.18139648 315.81713867]
[203.94853210 329.66744995]
[209.02911377 343.78405762]
[213.41090393 358.13296509]
[217.08334351 372.67956543]
[220.03759766 387.38888550]
[222.26654053 402.22540283]
[223.76480103 417.15344238]
[224.52877808 432.13702393]
[224.55661011 447.14004517]
[223.84825134 462.12634277]
[222.40541077 477.05981445]
[220.23153687 491.90454102]
[217.33189392 506.62469482]
[213.71347046 521.18487549]
[209.38496399 535.54992676]
[204.35679626 549.68530273]
[198.64111328 563.55688477]
[192.25164795 577.13134766]
[185.20382690 590.37597656]
[177.51460266 603.25878906]
[169.20251465 615.74877930]
[160.28758240 627.81585693]
[150.79129028 639.43103027]
[140.73649597 650.56616211]
[130.14744568 661.19458008]
[119.04962921 671.29058838]
[107.46978760 680.82989502]
[95.43582916 689.78955078]
[82.97673798 698.14788818]
[70.12252808 705.88482666]
[56.90417099 712.98175049]
[43.35350037 719.42150879]
[29.50317192 725.18859863]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[80 165]
[81 164]
[82 163]
[83 162]
[84 161]
[88 158]
[89 157]
[90 156]
[91 155]
[92 154]
[93 153]
[94 152]
[95 151]
[96 150]
[97 149]
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
80 165 24 gmark
80 cmark
81 164 12 gmark
81 cmark
164 cmark
82 163 19 gmark
82 cmark
163 cmark
83 162 17 gmark
83 cmark
162 cmark
84 161 18 gmark
84 cmark
161 cmark
88 158 20 gmark
89 157 19 gmark
89 cmark
157 cmark
90 156 18 gmark
90 cmark
156 cmark
91 155 13 gmark
91 cmark
155 cmark
92 154 9 gmark
92 cmark
154 cmark
93 153 15 gmark
93 cmark
153 cmark
94 152 14 gmark
94 cmark
152 cmark
95 151 17 gmark
95 cmark
151 cmark
96 150 19 gmark
96 cmark
150 cmark
97 149 19 gmark
97 cmark
149 cmark

% End Annotations
showpage
end
%%EOF
