%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Sun Jan 28 18:36:09 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAUUAGGUAUGGUAAUAUCGGGAAAAUAUGAAGAGAAAG_____GAAGGAAGGAAGUAGAGCCGAGAGGACGUAGAACGCGGCCCCCUGCGAGGCGAGGGCAGA________UGACACCACCCCCCGAAAUGUGAAUAAUAAUGGGGCAAAAAACCCACAGAAGAUCCCCAC__\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50786591 91.96761322]
[62.54407120 90.90347290]
[47.62747192 89.30892944]
[32.77686310 87.18598938]
[18.01095200 84.53732300]
[3.34834743 81.36627960]
[-11.19247627 77.67683411]
[-25.59319878 73.47365570]
[-39.83567429 68.76203156]
[-53.90195847 63.54790115]
[-67.77433014 57.83782959]
[-81.43530273 51.63901520]
[-94.86766815 44.95926666]
[-108.05450439 37.80700302]
[-120.97918701 30.19123077]
[-133.62544250 22.12154961]
[-145.97734070 13.60812855]
[-158.01928711 4.66169119]
[-169.73614502 -4.70648813]
[-181.11314392 -14.48460579]
[-192.13592529 -24.66034126]
[-202.79063416 -35.22087479]
[-213.06382751 -46.15289688]
[-222.94255066 -57.44263840]
[-232.41436768 -69.07586670]
[-241.46736145 -81.03793335]
[-250.09008789 -93.31375885]
[-258.27172852 -105.88787842]
[-266.00192261 -118.74445343]
[-273.27096558 -131.86727905]
[-280.06970215 -145.23982239]
[-286.38955688 -158.84523010]
[-292.22253418 -172.66635132]
[-297.56134033 -186.68579102]
[-302.39920044 -200.88587952]
[-306.73007202 -215.24873352]
[-310.54843140 -229.75622559]
[-313.84951782 -244.39010620]
[-316.62915039 -259.13192749]
[-318.88385010 -273.96310425]
[-320.61074829 -288.86495972]
[-321.80767822 -303.81872559]
[-322.47314453 -318.80554199]
[-322.60629272 -333.80651855]
[-322.20693970 -348.80279541]
[-321.27563477 -363.77545166]
[-319.81350708 -378.70559692]
[-317.82244873 -393.57446289]
[-315.30490112 -408.36328125]
[-312.26409912 -423.05346680]
[-308.70382690 -437.62646484]
[-304.62860107 -452.06390381]
[-300.04354858 -466.34762573]
[-294.95443726 -480.45962524]
[-289.36767578 -494.38211060]
[-283.29034424 -508.09756470]
[-276.73004150 -521.58868408]
[-269.69506836 -534.83843994]
[-262.19427490 -547.83020020]
[-254.23713684 -560.54754639]
[-245.83364868 -572.97448730]
[-236.99443054 -585.09539795]
[-227.73057556 -596.89489746]
[-218.05380249 -608.35821533]
[-207.97627258 -619.47088623]
[-197.51071167 -630.21887207]
[-186.67027283 -640.58862305]
[-175.46864319 -650.56719971]
[-163.91990662 -660.14184570]
[-152.03865051 -669.30059814]
[-139.83981323 -678.03192139]
[-127.33879089 -686.32482910]
[-114.55132294 -694.16882324]
[-101.49351501 -701.55401611]
[-88.18183136 -708.47113037]
[-74.63304138 -714.91143799]
[-60.86421204 -720.86688232]
[-46.89269638 -726.32983398]
[-32.73609543 -731.29351807]
[-18.41224861 -735.75164795]
[-3.93920374 -739.69860840]
[10.66480446 -743.12945557]
[25.38137436 -746.03979492]
[40.19196320 -748.42596436]
[55.07790756 -750.28503418]
[70.02045441 -751.61462402]
[85.00077820 -752.41302490]
[100.00000000 -752.67932129]
[114.99922180 -752.41302490]
[129.97953796 -751.61462402]
[144.92208862 -750.28503418]
[159.80804443 -748.42596436]
[174.61862183 -746.03979492]
[189.33518982 -743.12945557]
[203.93920898 -739.69860840]
[218.41224670 -735.75164795]
[232.73609924 -731.29351807]
[246.89270020 -726.32983398]
[260.86422729 -720.86688232]
[274.63305664 -714.91143799]
[288.18182373 -708.47113037]
[301.49353027 -701.55401611]
[314.55133057 -694.16882324]
[327.33880615 -686.32482910]
[339.83981323 -678.03192139]
[352.03863525 -669.30059814]
[363.91992188 -660.14184570]
[375.46862793 -650.56719971]
[386.67025757 -640.58862305]
[397.51071167 -630.21887207]
[407.97628784 -619.47088623]
[418.05380249 -608.35821533]
[427.73059082 -596.89489746]
[436.99441528 -585.09539795]
[445.83364868 -572.97448730]
[454.23712158 -560.54754639]
[462.19427490 -547.83020020]
[469.69506836 -534.83843994]
[476.73004150 -521.58868408]
[483.29034424 -508.09756470]
[489.36767578 -494.38211060]
[494.95443726 -480.45962524]
[500.04354858 -466.34762573]
[504.62860107 -452.06390381]
[508.70382690 -437.62646484]
[512.26409912 -423.05346680]
[515.30493164 -408.36328125]
[517.82244873 -393.57446289]
[519.81353760 -378.70559692]
[521.27563477 -363.77545166]
[522.20697021 -348.80279541]
[522.60626221 -333.80651855]
[522.47314453 -318.80554199]
[521.80767822 -303.81872559]
[520.61077881 -288.86495972]
[518.88385010 -273.96310425]
[516.62915039 -259.13192749]
[513.84954834 -244.39010620]
[510.54843140 -229.75622559]
[506.73007202 -215.24873352]
[502.39920044 -200.88587952]
[497.56134033 -186.68579102]
[492.22253418 -172.66635132]
[486.38955688 -158.84523010]
[480.06970215 -145.23982239]
[473.27096558 -131.86727905]
[466.00192261 -118.74445343]
[458.27172852 -105.88787842]
[450.09008789 -93.31375885]
[441.46734619 -81.03793335]
[432.41436768 -69.07586670]
[422.94253540 -57.44263840]
[413.06381226 -46.15289688]
[402.79061890 -35.22087479]
[392.13592529 -24.66034126]
[381.11312866 -14.48460579]
[369.73614502 -4.70648813]
[358.01928711 4.66169119]
[345.97732544 13.60812855]
[333.62545776 22.12154961]
[320.97918701 30.19123077]
[308.05450439 37.80700302]
[294.86767578 44.95926666]
[281.43530273 51.63901520]
[267.77432251 57.83782959]
[253.90196228 63.54790115]
[239.83567810 68.76203156]
[225.59320068 73.47365570]
[211.19247437 77.67683411]
[196.65165710 81.36627960]
[181.98904419 84.53732300]
[167.22314453 87.18598938]
[152.37252808 89.30892944]
[137.45593262 90.90347290]
[122.49213409 91.96761322]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
