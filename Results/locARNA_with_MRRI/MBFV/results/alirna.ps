%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Fri Feb  2 16:01:26 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______U__GAACAGUUUUUUGGAACAGGAGAUU_U_C__AUGU__ACUAAAAAACCAGGAAGGCCC___GGUAGAAACCGGGCUGUCAAUAUGCUAAAACGCGGAGUACCCCGCG_____________CAC_CCCAAAAAAAAA_CAGCAUAUUGACAC_CUGGGA__AAGACCAGGGGAUCUUCUGC_UC________________UCC\
) } def
/len { sequence length } bind def

/coor [
[36.79012299 627.96319580]
[23.92065620 635.68133545]
[10.53336906 642.46173096]
[-3.30351877 648.26983643]
[-17.51949692 653.07598877]
[-32.04212570 656.85577393]
[-46.79739380 659.58984375]
[-61.71011734 661.26434326]
[-76.70430756 661.87066650]
[-91.70354462 661.40582275]
[-106.63140106 659.87207031]
[-121.41181183 657.27734375]
[-135.96945190 653.63476562]
[-150.23014832 648.96295166]
[-164.12121582 643.28564453]
[-177.57186890 636.63183594]
[-190.51358032 629.03546143]
[-202.88040161 620.53515625]
[-214.60929871 611.17425537]
[-225.64050293 601.00048828]
[-235.91781616 590.06567383]
[-245.38885498 578.42553711]
[-254.00535583 566.13940430]
[-261.72341919 553.26989746]
[-268.50372314 539.88256836]
[-274.31170654 526.04559326]
[-279.11776733 511.82958984]
[-282.89739990 497.30694580]
[-285.63137817 482.55166626]
[-287.30575562 467.63891602]
[-287.91198730 452.64471436]
[-287.44702148 437.64547729]
[-285.91317749 422.71765137]
[-283.31829834 407.93725586]
[-279.67562866 393.37963867]
[-275.00369263 379.11898804]
[-269.32629395 365.22796631]
[-262.67239380 351.77734375]
[-255.07589722 338.83569336]
[-246.57550049 326.46896362]
[-237.21452332 314.74011230]
[-227.04066467 303.70898438]
[-216.10577393 293.43176270]
[-204.46556091 283.96081543]
[-192.17936707 275.34439087]
[-179.30978394 267.62643433]
[-165.92239380 260.84625244]
[-152.08541870 255.03837585]
[-137.86936951 250.23242188]
[-123.34667969 246.45288086]
[-108.59136200 243.71902466]
[-93.67861176 242.04475403]
[-78.68441772 241.43862915]
[-63.68518829 241.90373230]
[-48.75735474 243.43768311]
[-33.97698593 246.03266907]
[-19.41939926 249.67546082]
[-5.15878201 254.34751892]
[8.73219967 260.02499390]
[15.38313866 246.58010864]
[22.03407669 233.13522339]
[14.96309471 220.05320740]
[16.97500801 205.13958740]
[27.50594711 194.14173889]
[42.66874313 191.42221069]
[49.31967926 177.97731018]
[45.14461899 170.14288330]
[45.04078674 161.12846375]
[49.15792847 152.95419312]
[56.68571854 147.51002502]
[66.01026154 146.11923218]
[73.25214386 132.98320007]
[62.64304733 120.19400787]
[57.75382614 104.31282806]
[59.33307648 87.77129364]
[67.13899994 73.10214996]
[79.97639465 62.55143356]
[95.87968445 57.73461533]
[112.41385651 59.38921356]
[119.26329041 46.04435730]
[126.11273193 32.69950104]
[132.96217346 19.35464287]
[139.71253967 5.95940351]
[140.71247864 -3.11934161]
[146.56294250 -7.63433647]
[153.41238403 -20.97919273]
[160.26182556 -34.32405090]
[167.11126709 -47.66890717]
[173.96070862 -61.01376343]
[180.81013489 -74.35861969]
[187.65957642 -87.70347595]
[194.50901794 -101.04833221]
[201.35845947 -114.39318848]
[208.20790100 -127.73804474]
[215.05732727 -141.08290100]
[221.90676880 -154.42774963]
[209.45030212 -162.81658936]
[198.07345581 -172.61984253]
[187.93595886 -183.69989014]
[179.18011475 -195.90118408]
[171.92884827 -209.05244446]
[166.28396606 -222.96903992]
[162.32469177 -237.45561218]
[160.10662842 -252.30877686]
[159.66088867 -267.32003784]
[160.99375916 -282.27862549]
[164.08651733 -296.97457886]
[168.89573669 -311.20159912]
[175.35391235 -324.75991821]
[183.37037659 -337.45922852]
[192.83259583 -349.12127686]
[203.60772705 -359.58227539]
[215.54452515 -368.69543457]
[228.47538757 -376.33276367]
[242.21879578 -382.38708496]
[256.58181763 -386.77340698]
[271.36282349 -389.43014526]
[286.35430908 -390.32000732]
[301.34582520 -389.43048096]
[316.12689209 -386.77404785]
[330.48999023 -382.38803101]
[344.23355103 -376.33401489]
[357.16458130 -368.69692993]
[369.10156250 -359.58404541]
[379.87692261 -349.12326050]
[389.33938599 -337.46142578]
[397.35610962 -324.76229858]
[403.81457520 -311.20410156]
[408.62411499 -296.97720337]
[411.71716309 -282.28131104]
[413.05035400 -267.32272339]
[412.60494995 -252.31146240]
[410.38720703 -237.45825195]
[406.42825317 -222.97160339]
[400.78363037 -209.05488586]
[393.53265381 -195.90347290]
[384.77706909 -183.70199585]
[374.63983154 -172.62173462]
[363.26318359 -162.81823730]
[350.80688477 -154.42912292]
[337.44580078 -147.57218933]
[323.36749268 -142.34367371]
[308.76956177 -138.81698608]
[293.85702515 -137.04162598]
[278.83914185 -137.04252625]
[263.92678833 -138.81967163]
[249.32931519 -142.34811401]
[235.25163269 -147.57832336]
[228.40219116 -134.23345947]
[221.55274963 -120.88860321]
[214.70330811 -107.54374695]
[207.85388184 -94.19889069]
[201.00444031 -80.85403442]
[194.15499878 -67.50917816]
[187.30555725 -54.16432190]
[180.45611572 -40.81946564]
[173.60668945 -27.47461128]
[166.75724792 -14.12975407]
[159.90780640 -0.78489786]
[153.15742493 12.61034203]
[153.00923157 19.99893379]
[146.30702209 26.20408249]
[139.45758057 39.54893875]
[132.60815430 52.89379501]
[125.75871277 66.23864746]
[134.90049744 75.80712128]
[140.65298462 87.72503662]
[142.45753479 100.83501434]
[140.13891602 113.86389923]
[133.92227173 125.54641724]
[124.41133118 134.74804688]
[112.52973938 140.57518005]
[99.43133545 142.46194458]
[86.38816833 140.22508240]
[79.14628601 153.36111450]
[80.87078094 174.72135925]
[62.76456833 184.62825012]
[56.11362839 198.07313538]
[63.15278625 211.77557373]
[60.80126953 226.81962585]
[50.16793823 237.46839905]
[35.47896576 239.78616333]
[28.82802582 253.23104858]
[22.17708778 266.67593384]
[35.11891556 274.27215576]
[47.48585892 282.77227783]
[59.21489716 292.13296509]
[70.24626160 302.30657959]
[80.52374268 313.24124146]
[89.99496460 324.88122559]
[98.61166382 337.16720581]
[106.32992554 350.03662109]
[113.11042786 363.42385864]
[118.91861725 377.26071167]
[123.72488403 391.47665405]
[127.50476074 405.99923706]
[130.23896790 420.75448608]
[131.91355896 435.66720581]
[132.52003479 450.66137695]
[132.05528259 465.66061401]
[130.52168274 480.58850098]
[127.92703247 495.36892700]
[124.28456879 509.92660522]
[119.61284637 524.18731689]
[113.93567657 538.07843018]
[107.28199005 551.52917480]
[99.68568420 564.47088623]
[91.18547058 576.83776855]
[81.82466888 588.56677246]
[71.65097809 599.59802246]
[60.71624756 609.87542725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[59 184]
[60 183]
[61 182]
[65 178]
[66 177]
[71 175]
[72 174]
[79 165]
[80 164]
[81 163]
[82 162]
[83 160]
[85 159]
[86 158]
[87 157]
[88 156]
[89 155]
[90 154]
[91 153]
[92 152]
[93 151]
[94 150]
[95 149]
[96 148]
] def

init

% Start Annotations
59 184 0.32 0.6 colorpair
71 175 0.16 0.2 colorpair
80 164 0.0 0.6 colorpair
90 154 0.0 0.2 colorpair
91 153 0.0 0.2 colorpair
92 152 0.0 0.2 colorpair
93 151 0.16 1 colorpair
96 148 0.0 0.2 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
59 184 1 gmark
59 cmark
184 cmark
60 183 7 gmark
183 cmark
61 182 9 gmark
61 cmark
182 cmark
65 178 9 gmark
65 cmark
178 cmark
66 177 7 gmark
71 175 2 gmark
175 cmark
72 174 9 gmark
79 165 7 gmark
79 cmark
80 164 1 gmark
81 163 6 gmark
81 cmark
163 cmark
82 162 4 gmark
83 160 9 gmark
85 159 9 gmark
85 cmark
159 cmark
86 158 7 gmark
86 cmark
158 cmark
87 157 3 gmark
88 156 3 gmark
88 cmark
89 155 3 gmark
90 154 2 gmark
91 153 2 gmark
92 152 2 gmark
151 cmark
94 150 3 gmark
150 cmark
95 149 4 gmark
95 cmark
149 cmark
96 148 2 gmark

% End Annotations
showpage
end
%%EOF
