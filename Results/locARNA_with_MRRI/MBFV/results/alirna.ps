%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Jan 19 13:18:00 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
______UUUGAAC__UUUUUUAGCAGAGAUUAUU__CAAUGUCU___AAAAAACCAGGAAGGCCC___GGAAGAAACCGGGCUGUCAAUAUGCUAAAACGCGGAGCAACCCGCG_____________CACCCC_CAAAAAAAAACAGCAUAUUGACACCUGGGA__AAGACCAGGAGAUCCUCUGC_UU________________UCC\
) } def
/len { sequence length } bind def

/coor [
[69.93452454 564.93792725]
[57.03581619 572.60833740]
[43.59995651 579.29339600]
[29.70209122 584.95568848]
[15.41994095 589.56353760]
[0.83337939 593.09118652]
[-13.97601891 595.51898193]
[-28.92543411 596.83319092]
[-43.93125916 597.02655029]
[-58.90957642 596.09802246]
[-73.77661896 594.05273438]
[-88.44924927 590.90216064]
[-102.84540558 586.66387939]
[-116.88457489 581.36163330]
[-130.48825073 575.02502441]
[-143.58033752 567.68957520]
[-156.08764648 559.39624023]
[-167.94021606 550.19140625]
[-179.07176208 540.12652588]
[-189.42002869 529.25799561]
[-198.92713928 517.64648438]
[-207.53994751 505.35699463]
[-215.21025085 492.45822144]
[-221.89518738 479.02227783]
[-227.55735779 465.12438965]
[-232.16510010 450.84219360]
[-235.69262695 436.25558472]
[-238.12023926 421.44616699]
[-239.43435669 406.49673462]
[-239.62760925 391.49090576]
[-238.69892883 376.51260376]
[-236.65350342 361.64559937]
[-233.50279236 346.97299194]
[-229.26438904 332.57687378]
[-223.96200562 318.53775024]
[-217.62530518 304.93411255]
[-210.28971863 291.84210205]
[-201.99626160 279.33486938]
[-192.79132080 267.48236084]
[-182.72639465 256.35092163]
[-171.85774231 246.00274658]
[-160.24615479 236.49574280]
[-147.95657349 227.88304138]
[-135.05772400 220.21284485]
[-121.62174988 213.52803040]
[-107.72378540 207.86598206]
[-93.44155884 203.25837708]
[-78.85493469 199.73095703]
[-64.04549408 197.30348206]
[-49.09605408 195.98950195]
[-34.09022522 195.79638672]
[-19.11192322 196.72520447]
[-4.24491405 198.77075195]
[10.42765713 201.92160034]
[24.82373619 206.16012573]
[38.86281204 211.46263123]
[45.19641113 197.86537170]
[51.53000641 184.26811218]
[57.86360550 170.67083740]
[50.33052444 159.64732361]
[49.21959305 146.23341370]
[54.92761612 133.92440796]
[66.06051636 125.98078918]
[79.77218628 124.56473541]
[86.30944824 111.06420898]
[82.49790955 101.87743378]
[84.27423096 92.09125519]
[91.07129669 84.83008575]
[100.71901703 82.41219330]
[107.65912628 69.11426544]
[96.63133240 56.34736252]
[91.36391449 40.35919952]
[92.63794708 23.61084747]
[100.22986603 8.66897869]
[112.95006561 -2.18745208]
[128.82922363 -7.31479311]
[145.42315674 -5.95349836]
[151.96041870 -19.45402527]
[158.49768066 -32.95455170]
[165.03494263 -46.45507812]
[171.57220459 -59.95560455]
[178.10946655 -73.45613098]
[179.03323364 -82.54532623]
[184.84779358 -87.10932922]
[191.58724976 -100.51007080]
[198.32669067 -113.91081238]
[205.06614685 -127.31154633]
[211.80558777 -140.71229553]
[218.54504395 -154.11302185]
[225.28448486 -167.51376343]
[232.02394104 -180.91450500]
[238.76338196 -194.31524658]
[245.50283813 -207.71598816]
[252.24227905 -221.11672974]
[239.71723938 -229.40283203]
[228.26014709 -239.11218262]
[218.03186035 -250.10847473]
[209.17596436 -262.23733521]
[201.81678772 -275.32852173]
[196.05761719 -289.19821167]
[191.97933960 -303.65173340]
[189.63919067 -318.48614502]
[189.07000732 -333.49322510]
[190.27980042 -348.46228027]
[193.25157166 -363.18316650]
[197.94361877 -377.44924927]
[204.29006958 -391.06024170]
[212.20181274 -403.82507324]
[221.56779480 -415.56451416]
[232.25653076 -426.11380005]
[244.11795044 -435.32482910]
[256.98556519 -443.06826782]
[270.67871094 -449.23541260]
[285.00518799 -453.73971558]
[299.76385498 -456.51794434]
[314.74749756 -457.53103638]
[329.74581909 -456.76486206]
[344.54821777 -454.23010254]
[358.94692993 -449.96237183]
[372.73980713 -444.02157593]
[385.73321533 -436.49111938]
[397.74475098 -427.47671509]
[408.60577393 -417.10488892]
[418.16384888 -405.52130127]
[426.28475952 -392.88851929]
[432.85449219 -379.38391113]
[437.78088379 -365.19705200]
[440.99472046 -350.52706909]
[442.45086670 -335.57998657]
[442.12893677 -320.56555176]
[440.03344727 -305.69461060]
[436.19375610 -291.17590332]
[430.66381836 -277.21322632]
[423.52124023 -264.00262451]
[414.86630249 -251.72953796]
[404.82052612 -240.56626892]
[393.52490234 -230.66954041]
[381.13803101 -222.17826843]
[367.83380127 -215.21166992]
[353.79895020 -209.86753845]
[339.23056030 -206.22090149]
[324.33309937 -204.32295227]
[309.31573486 -204.20034790]
[294.38925171 -205.85478210]
[279.76324463 -209.26303101]
[265.64303589 -214.37727356]
[258.90356445 -200.97653198]
[252.16412354 -187.57580566]
[245.42468262 -174.17506409]
[238.68522644 -160.77432251]
[231.94578552 -147.37358093]
[225.20632935 -133.97283936]
[218.46687317 -120.57209778]
[211.72743225 -107.17136383]
[204.98797607 -93.77062225]
[198.24853516 -80.36988068]
[191.60998535 -66.91886902]
[185.07272339 -53.41834259]
[178.53546143 -39.91781616]
[171.99819946 -26.41728973]
[165.46093750 -12.91676235]
[158.92367554 0.58376354]
[168.35366821 9.90641594]
[174.46226501 21.70160103]
[176.64241028 34.82767868]
[174.66802979 48.00931931]
[168.71745300 59.96139526]
[159.35728455 69.51428223]
[147.48858643 75.72832489]
[134.26010132 77.98622894]
[120.95705414 76.05438232]
[114.01693726 89.35231018]
[115.72576904 107.90874481]
[99.80997467 117.60147095]
[93.27271271 131.10200500]
[101.45795441 145.90310669]
[99.23086548 162.50180054]
[87.66535187 174.38359070]
[71.46086884 177.00444031]
[65.12727356 190.60169983]
[58.79367447 204.19895935]
[52.46007538 217.79623413]
[65.55230713 225.13146973]
[78.05975342 233.42459106]
[89.91248322 242.62921143]
[101.04420471 252.69384766]
[111.39266205 263.56222534]
[120.89998627 275.17355347]
[129.51300049 287.46292114]
[137.18354797 300.36157227]
[143.86871338 313.79736328]
[149.53112793 327.69515991]
[154.13911438 341.97729492]
[157.66691589 356.56381226]
[160.09478760 371.37319946]
[161.40914917 386.32260132]
[161.60267639 401.32843018]
[160.67425537 416.30673218]
[158.62910461 431.17379761]
[155.47863770 445.84646606]
[151.24049377 460.24264526]
[145.93835449 474.28186035]
[139.60189819 487.88558960]
[132.26654053 500.97775269]
[123.97330475 513.48516846]
[114.76857758 525.33776855]
[104.70384216 536.46942139]
[93.83537292 546.81781006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[56 182]
[57 181]
[58 180]
[59 179]
[64 175]
[65 174]
[69 172]
[70 171]
[77 162]
[78 161]
[79 160]
[80 159]
[81 158]
[82 157]
[84 156]
[85 155]
[86 154]
[87 153]
[88 152]
[89 151]
[90 150]
[91 149]
[92 148]
[93 147]
[94 146]
] def

init

% Start Annotations
65 174 0.16 1 colorpair
69 172 0.16 0.2 colorpair
78 161 0.0 0.6 colorpair
85 155 0.0 0.6 colorpair
86 154 0.16 0.6 colorpair
87 153 0.0 0.6 colorpair
88 152 0.0 0.6 colorpair
89 151 0.16 1 colorpair
90 150 0.0 1 colorpair
91 149 0.0 0.6 colorpair
92 148 0.0 0.6 colorpair
93 147 0.16 0.6 colorpair
94 146 0.0 1 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
56 182 7 gmark
56 cmark
57 181 8 gmark
181 cmark
58 180 6 gmark
58 cmark
180 cmark
59 179 9 gmark
59 cmark
179 cmark
64 175 8 gmark
65 cmark
69 172 2 gmark
172 cmark
70 171 9 gmark
77 162 6 gmark
77 cmark
78 161 1 gmark
79 160 5 gmark
79 cmark
160 cmark
80 159 3 gmark
81 158 9 gmark
82 157 10 gmark
82 cmark
157 cmark
84 156 7 gmark
85 155 1 gmark
86 154 1 gmark
86 cmark
87 153 1 gmark
88 152 1 gmark
151 cmark
91 149 1 gmark
92 148 1 gmark
93 147 1 gmark
93 cmark
147 cmark

% End Annotations
showpage
end
%%EOF
