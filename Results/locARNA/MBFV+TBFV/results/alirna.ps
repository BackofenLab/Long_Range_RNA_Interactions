%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Tue Jan 23 13:16:59 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________UGAACAAUUUUUUGGAAAAGAGGA_UUUCC______AUGUCU___AAAAAACCAGGAAGGCCC___GGAAAAAACCGGGCUGUCAAUAUGCU____GAAACGCGGAAGAGCCCGCG_______________AACCCAAAA_AAAAAACAGCAUAUUGACACCUGGGA__GAGACCAGGGGAUCCUCUGUUUU_C_________________\
) } def
/len { sequence length } bind def

/coor [
[79.76966095 575.36669922]
[64.81745148 573.89099121]
[50.21615601 570.34863281]
[36.24998856 564.80859375]
[23.19080353 557.37866211]
[11.29280281 548.20349121]
[0.78758466 537.46166992]
[-8.12036419 525.36230469]
[-15.25764751 512.14093018]
[-20.48533630 498.05484009]
[-23.70167160 483.37829590]
[-24.84404755 468.39691162]
[-23.89022636 453.40237427]
[-20.85877419 438.68652344]
[-15.80870056 424.53579712]
[-8.83830547 411.22567749]
[-0.08326995 399.01519775]
[10.28598595 388.14208984]
[22.06762314 378.81796265]
[35.03230667 371.22433472]
[48.92767715 365.50903320]
[63.48325348 361.78326416]
[78.41571045 360.11959839]
[78.84405518 345.12570190]
[79.27239227 330.13183594]
[79.70073700 315.13793945]
[80.12907410 300.14407349]
[80.55741882 285.15017700]
[80.98575592 270.15631104]
[81.41410065 255.16241455]
[81.84243774 240.16853333]
[82.27078247 225.17465210]
[82.69911957 210.18077087]
[83.12746429 195.18687439]
[83.55580139 180.19299316]
[77.11174011 177.40713501]
[71.53181458 173.11059570]
[67.16440582 167.55799866]
[64.28549194 161.08280945]
[63.08127975 154.07725525]
[63.63615036 146.96861267]
[65.92686462 140.19316101]
[69.82334137 134.16935730]
[75.09594727 129.27201843]
[81.42907715 125.80902863]
[88.43998718 124.00196838]
[90.57470703 109.15464783]
[82.22151184 121.61354828]
[71.41483307 132.01622009]
[58.64686203 139.88888550]
[44.49911118 144.87297058]
[29.61594200 146.74148560]
[14.67521477 145.40933228]
[0.35740292 140.93716431]
[-12.68538761 133.52868652]
[-23.85912132 123.52130127]
[-32.65489197 111.37081146]
[-38.67209244 97.63059998]
[-41.63666916 82.92647552]
[-41.41360092 67.92813873]
[-38.01304626 53.31867981]
[-31.58988762 39.76349640]
[-22.43666458 27.87995529]
[-10.97026348 18.20929718]
[2.28707981 11.19197273]
[16.73155785 7.14758444]
[31.70529366 6.26033545]
[46.52630997 8.57063580]
[60.51958084 13.97326183]
[73.04778290 22.22215080]
[83.54031372 32.94160843]
[91.51929474 45.64340973]
[96.62133026 59.74905777]
[98.61402893 74.61611176]
[97.40723419 89.56432343]
[87.15838623 77.36189270]
[81.71779633 62.41252518]
[81.72627258 46.53077316]
[87.16439056 31.63764954]
[97.35710907 19.52830124]
[111.05746460 11.65561295]
[126.59911346 8.95591259]
[142.09901428 11.73763561]
[149.47500610 -1.32355523]
[156.85101318 -14.38474655]
[164.22700500 -27.44593811]
[171.60299683 -40.50712967]
[173.09614563 -49.51179123]
[179.17871094 -53.70107651]
[186.74046326 -66.65560913]
[194.30221558 -79.61014557]
[201.86395264 -92.56468201]
[209.42570496 -105.51921082]
[216.98745728 -118.47374725]
[224.54920959 -131.42828369]
[232.11096191 -144.38281250]
[239.67269897 -157.33735657]
[247.23445129 -170.29188538]
[254.79620361 -183.24641418]
[262.35794067 -196.20095825]
[250.28448486 -205.12724304]
[239.24690247 -215.30659485]
[229.37463379 -226.61965942]
[220.78341675 -238.93380737]
[213.57397461 -252.10466003]
[207.83085632 -265.97778320]
[203.62136841 -280.39053345]
[200.99487305 -295.17391968]
[199.98217773 -310.15463257]
[200.59513855 -325.15701294]
[202.82656860 -340.00518799]
[206.65032959 -354.52502441]
[212.02157593 -368.54635620]
[218.87731934 -381.90472412]
[227.13719177 -394.44351196]
[236.70434570 -406.01574707]
[247.46662903 -416.48574829]
[259.29782104 -425.73074341]
[272.05926514 -433.64233398]
[285.60128784 -440.12774658]
[299.76513672 -445.11099243]
[314.38473511 -448.53359985]
[329.28869629 -450.35546875]
[344.30227661 -450.55523682]
[359.24942017 -449.13055420]
[373.95492554 -446.09811401]
[388.24633789 -441.49346924]
[401.95611572 -435.37063599]
[414.92352295 -427.80136108]
[426.99652100 -418.87442017]
[438.03353882 -408.69448853]
[447.90521240 -397.38088989]
[456.49575806 -385.06628418]
[463.70449829 -371.89505005]
[469.44686890 -358.02160645]
[473.65557861 -343.60861206]
[476.28128052 -328.82507324]
[477.29318237 -313.84432983]
[476.67941284 -298.84197998]
[474.44717407 -283.99392700]
[470.62261963 -269.47427368]
[465.25064087 -255.45326233]
[458.39416504 -242.09526062]
[450.13360596 -229.55690002]
[440.56582642 -217.98518372]
[429.80300903 -207.51576233]
[417.97128296 -198.27142334]
[405.20944214 -190.36051941]
[391.66705322 -183.87580872]
[377.50296021 -178.89334106]
[362.88314819 -175.47151184]
[347.97909546 -173.65045166]
[332.96551514 -173.45149231]
[318.01843262 -174.87698364]
[303.31311035 -177.91021729]
[289.02194214 -182.51562500]
[275.31250000 -188.63920593]
[267.75073242 -175.68467712]
[260.18899536 -162.73013306]
[252.62724304 -149.77560425]
[245.06549072 -136.82106018]
[237.50373840 -123.86653137]
[229.94198608 -110.91200256]
[222.38024902 -97.95746613]
[214.81849670 -85.00292969]
[207.25674438 -72.04840088]
[199.69499207 -59.09386444]
[192.13325500 -46.13932800]
[184.66418457 -33.13113403]
[177.28819275 -20.06994438]
[169.91220093 -7.00875235]
[162.53620911 6.05243874]
[155.16021729 19.11363029]
[164.68286133 29.58444595]
[170.51594543 42.50348282]
[172.07734680 56.61365509]
[169.20130920 70.53746796]
[162.15591431 82.91152191]
[151.61819458 92.51997375]
[138.60905457 98.41403961]
[124.39434814 100.00563812]
[110.36177063 97.12607574]
[105.42202759 111.28936768]
[103.28730774 126.13668823]
[119.19079590 143.56158447]
[117.00431061 166.78674316]
[98.54968262 180.62133789]
[98.12134552 195.61521912]
[97.69300079 210.60910034]
[97.26466370 225.60298157]
[96.83631897 240.59687805]
[96.40798187 255.59075928]
[95.97964478 270.58462524]
[95.55130005 285.57852173]
[95.12296295 300.57238770]
[94.69461823 315.56628418]
[94.26628113 330.56018066]
[93.83793640 345.55404663]
[93.40959930 360.54794312]
[108.22272491 363.06137085]
[122.54186249 367.61203003]
[136.08828735 374.11126709]
[148.59832764 382.43264771]
[159.82844543 392.41415405]
[169.56005859 403.86151123]
[177.60372925 416.55187988]
[183.80290222 430.23825073]
[188.03688049 444.65420532]
[190.22328186 459.51910400]
[190.31953430 474.54364014]
[188.32374573 489.43536377]
[184.27479553 503.90435791]
[178.25146484 517.66900635]
[170.37103271 530.46142578]
[160.78688049 542.03247070]
[149.68554688 552.15704346]
[137.28315735 560.63800049]
[123.82110596 567.31030273]
[109.56143951 572.04400635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[23 199]
[24 198]
[25 197]
[26 196]
[27 195]
[28 194]
[29 193]
[30 192]
[31 191]
[32 190]
[33 189]
[34 188]
[35 187]
[46 184]
[47 183]
[75 182]
[83 173]
[84 172]
[85 171]
[86 170]
[87 169]
[89 168]
[90 167]
[91 166]
[92 165]
[93 164]
[94 163]
[95 162]
[96 161]
[97 160]
[98 159]
[99 158]
[100 157]
] def

init

% Start Annotations
28 194 0.32 0.2 colorpair
30 192 0.32 0.2 colorpair
46 184 0.16 1 colorpair
92 165 0.32 1 colorpair
93 164 0.16 1 colorpair
100 157 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
23 199 4 gmark
23 cmark
199 cmark
24 198 5 gmark
24 cmark
198 cmark
25 197 9 gmark
25 cmark
197 cmark
26 196 11 gmark
26 cmark
196 cmark
27 195 6 gmark
27 cmark
195 cmark
28 194 2 gmark
28 cmark
194 cmark
29 193 4 gmark
29 cmark
193 cmark
30 192 2 gmark
30 cmark
192 cmark
31 191 6 gmark
31 cmark
191 cmark
32 190 11 gmark
32 cmark
33 189 13 gmark
33 cmark
189 cmark
34 188 8 gmark
34 cmark
188 cmark
35 187 7 gmark
35 cmark
187 cmark
184 cmark
47 183 10 gmark
183 cmark
75 182 3 gmark
75 cmark
182 cmark
83 173 9 gmark
83 cmark
84 172 5 gmark
84 cmark
172 cmark
85 171 5 gmark
85 cmark
171 cmark
86 170 3 gmark
87 169 5 gmark
87 cmark
169 cmark
89 168 11 gmark
89 cmark
168 cmark
90 167 7 gmark
91 166 6 gmark
92 cmark
165 cmark
93 cmark
94 163 6 gmark
95 162 6 gmark
96 161 6 gmark
97 160 6 gmark
98 159 6 gmark
99 158 7 gmark
99 cmark
158 cmark
100 157 1 gmark

% End Annotations
showpage
end
%%EOF
