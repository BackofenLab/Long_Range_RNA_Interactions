%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Thu Feb 15 17:09:51 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AA__AUUUUAUAAAUUAUUAGCUAUGGUAAUAUCGGGAAAAUAUGAAGAGGAAGGAAGGAGAGAAGUAGGGGGGACGGGACGAGGAACGGGCCGUCCCA___CGAGGCGAGGGCAAA_______AUG___ACCACCCCCCGAAAUGUGAAUAAUGACAGUGC_AAGAACCCAACAGAAGAUCCCCAC_\
) } def
/len { sequence length } bind def

/coor [
[92.50000000 92.50000000]
[77.50697327 91.99874878]
[62.53906631 90.99678802]
[47.61300278 89.49523926]
[32.74544525 87.49576569]
[17.95300484 85.00061798]
[3.25219917 82.01256561]
[-11.34055138 78.53496552]
[-25.80894852 74.57167816]
[-40.13683319 70.12715149]
[-54.30820084 65.20633698]
[-68.30722809 59.81473541]
[-82.11827850 53.95837021]
[-95.72592163 47.64377594]
[-109.11496735 40.87800598]
[-122.27045441 33.66862488]
[-135.17768860 26.02367592]
[-147.82226562 17.95170212]
[-160.19006348 9.46171665]
[-172.26725769 0.56320328]
[-184.04035950 -8.73390007]
[-195.49623108 -18.41921043]
[-206.62205505 -28.48190880]
[-217.40544128 -38.91075897]
[-227.83430481 -49.69411087]
[-237.89703369 -60.81992340]
[-247.58236694 -72.27576447]
[-256.87951660 -84.04884338]
[-265.77804565 -96.12601471]
[-274.26806641 -108.49378967]
[-282.34005737 -121.13835144]
[-289.98504639 -134.04557800]
[-297.19445801 -147.20104980]
[-303.96026611 -160.59007263]
[-310.27487183 -174.19770813]
[-316.13128662 -188.00874329]
[-321.52291870 -202.00775146]
[-326.44375610 -216.17910767]
[-330.88833618 -230.50698853]
[-334.85165405 -244.97537231]
[-338.32928467 -259.56811523]
[-341.31735229 -274.26892090]
[-343.81256104 -289.06134033]
[-345.81204224 -303.92889404]
[-347.31362915 -318.85494995]
[-348.31564331 -333.82287598]
[-348.81692505 -348.81588745]
[-348.81692505 -363.81729126]
[-348.31567383 -378.81030273]
[-347.31369019 -393.77822876]
[-345.81213379 -408.70428467]
[-343.81265259 -423.57183838]
[-341.31750488 -438.36428833]
[-338.32943726 -453.06509399]
[-334.85180664 -467.65783691]
[-330.88851929 -482.12622070]
[-326.44396973 -496.45410156]
[-321.52316284 -510.62545776]
[-316.13153076 -524.62451172]
[-310.27517700 -538.43554688]
[-303.96057129 -552.04315186]
[-297.19479370 -565.43218994]
[-289.98538208 -578.58770752]
[-282.34042358 -591.49493408]
[-274.26846313 -604.13952637]
[-265.77844238 -616.50726318]
[-256.87994385 -628.58447266]
[-247.58282471 -640.35754395]
[-237.89749146 -651.81341553]
[-227.83479309 -662.93927002]
[-217.40592957 -673.72259521]
[-206.62257385 -684.15148926]
[-195.49674988 -694.21423340]
[-184.04090881 -703.89953613]
[-172.26780701 -713.19665527]
[-160.19064331 -722.09521484]
[-147.82286072 -730.58520508]
[-135.17829895 -738.65716553]
[-122.27106476 -746.30218506]
[-109.11558533 -753.51153564]
[-95.72655487 -760.27734375]
[-82.11891937 -766.59197998]
[-68.30787659 -772.44836426]
[-54.30886078 -777.83996582]
[-40.13749695 -782.76080322]
[-25.80962181 -787.20538330]
[-11.34123039 -791.16864014]
[3.25151396 -794.64630127]
[17.95231438 -797.63433838]
[32.74475098 -800.12951660]
[47.61230469 -802.12902832]
[62.53836823 -803.63061523]
[77.50627136 -804.63256836]
[92.49929810 -805.13385010]
[107.50070190 -805.13385010]
[122.49372864 -804.63256836]
[137.46162415 -803.63061523]
[152.38769531 -802.12902832]
[167.25524902 -800.12951660]
[182.04768372 -797.63433838]
[196.74848938 -794.64630127]
[211.34123230 -791.16864014]
[225.80961609 -787.20538330]
[240.13749695 -782.76080322]
[254.30885315 -777.83996582]
[268.30789185 -772.44836426]
[282.11892700 -766.59197998]
[295.72656250 -760.27734375]
[309.11560059 -753.51153564]
[322.27105713 -746.30218506]
[335.17828369 -738.65716553]
[347.82284546 -730.58520508]
[360.19064331 -722.09521484]
[372.26782227 -713.19665527]
[384.04089355 -703.89953613]
[395.49676514 -694.21423340]
[406.62255859 -684.15148926]
[417.40594482 -673.72259521]
[427.83477783 -662.93927002]
[437.89749146 -651.81341553]
[447.58282471 -640.35754395]
[456.87994385 -628.58447266]
[465.77844238 -616.50726318]
[474.26846313 -604.13952637]
[482.34042358 -591.49493408]
[489.98538208 -578.58770752]
[497.19479370 -565.43218994]
[503.96057129 -552.04315186]
[510.27517700 -538.43554688]
[516.13153076 -524.62451172]
[521.52313232 -510.62545776]
[526.44396973 -496.45410156]
[530.88854980 -482.12622070]
[534.85180664 -467.65783691]
[538.32940674 -453.06509399]
[541.31750488 -438.36428833]
[543.81268311 -423.57183838]
[545.81213379 -408.70428467]
[547.31372070 -393.77822876]
[548.31567383 -378.81030273]
[548.81695557 -363.81729126]
[548.81689453 -348.81588745]
[548.31561279 -333.82287598]
[547.31365967 -318.85494995]
[545.81207275 -303.92889404]
[543.81256104 -289.06134033]
[541.31738281 -274.26892090]
[538.32928467 -259.56811523]
[534.85162354 -244.97537231]
[530.88830566 -230.50698853]
[526.44378662 -216.17910767]
[521.52288818 -202.00775146]
[516.13128662 -188.00874329]
[510.27487183 -174.19770813]
[503.96026611 -160.59007263]
[497.19445801 -147.20104980]
[489.98504639 -134.04557800]
[482.34005737 -121.13835144]
[474.26806641 -108.49378967]
[465.77804565 -96.12601471]
[456.87951660 -84.04884338]
[447.58236694 -72.27576447]
[437.89703369 -60.81992340]
[427.83432007 -49.69411087]
[417.40542603 -38.91075897]
[406.62207031 -28.48190880]
[395.49621582 -18.41921043]
[384.04034424 -8.73390007]
[372.26724243 0.56320328]
[360.19006348 9.46171665]
[347.82226562 17.95170212]
[335.17770386 26.02367592]
[322.27044678 33.66862488]
[309.11495972 40.87800598]
[295.72592163 47.64377594]
[282.11828613 53.95837021]
[268.30722046 59.81473541]
[254.30819702 65.20633698]
[240.13682556 70.12715149]
[225.80894470 74.57167816]
[211.34054565 78.53496552]
[196.74780273 82.01256561]
[182.04699707 85.00061798]
[167.25454712 87.49576569]
[152.38699341 89.49523926]
[137.46093750 90.99678802]
[122.49302673 91.99874878]
[107.50000000 92.50000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
] def

init

% Start Annotations

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations

% End Annotations
showpage
end
%%EOF
