%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Tue Dec 19 16:54:48 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
________UGAACAGUUUUUUUGAACAGAGGA_UUUCCC_____AUGUCU___AAAAAACCAGGAAGGCCC___GGAAAAAACCGGGCUGUCAAUAUGCUAAAACGCGGAGCAACCCGCG_____________CAACCCAAAA_AAAAAACAGCAUAUUGACACCUGGGA__AAGACCAGGGGAUCUUCUGCUCUGC_________________\
) } def
/len { sequence length } bind def

/coor [
[173.50202942 440.71115112]
[158.77581787 443.55789185]
[143.94078064 445.76846313]
[129.02436829 447.33877563]
[114.05422211 448.26586914]
[99.05804443 448.54806519]
[84.06360626 448.18481445]
[69.09867859 447.17681885]
[54.19097900 445.52593994]
[39.36810303 443.23519897]
[24.65750313 440.30889893]
[10.08642101 436.75241089]
[-4.31816149 432.57232666]
[-18.52957153 427.77639771]
[-32.52149200 422.37350464]
[-46.26801300 416.37365723]
[-59.74368286 409.78796387]
[-72.92353821 402.62863159]
[-85.78318787 394.90887451]
[-98.29880524 386.64300537]
[-110.44721985 377.84637451]
[-122.20593262 368.53521729]
[-133.55317688 358.72677612]
[-144.46792603 348.43927002]
[-154.92999268 337.69168091]
[-164.91996765 326.50396729]
[-174.41938782 314.89678955]
[-183.41064453 302.89169312]
[-191.87709045 290.51089478]
[-199.80303955 277.77731323]
[-207.17382812 264.71450806]
[-213.97579956 251.34671021]
[-220.19636536 237.69863892]
[-225.82400513 223.79559326]
[-230.84829712 209.66331482]
[-235.25991821 195.32794189]
[-239.05073547 180.81605530]
[-242.21369934 166.15452576]
[-244.74295044 151.37048340]
[-246.63383484 136.49131775]
[-247.88282776 121.54457855]
[-248.48762512 106.55793762]
[-248.44709778 91.55915833]
[-247.76133728 76.57601166]
[-246.43159485 61.63623810]
[-244.46035767 46.76750565]
[-241.85124207 31.99734688]
[-238.60910034 17.35311317]
[-234.73994446 2.86192250]
[-230.25091553 -11.44939041]
[-225.15034485 -25.55432510]
[-219.44766235 -39.42676163]
[-213.15344238 -53.04101562]
[-206.27934265 -66.37187195]
[-198.83807373 -79.39464569]
[-190.84342957 -92.08522034]
[-182.31021118 -104.42009735]
[-173.25422668 -116.37643433]
[-163.69223022 -127.93209839]
[-153.64193726 -139.06568909]
[-143.12196350 -149.75657654]
[-132.15177917 -159.98497009]
[-120.75170135 -169.73193359]
[-108.94284821 -178.97941589]
[-96.74707794 -187.71029663]
[-84.18698120 -195.90841675]
[-71.28581238 -203.55856323]
[-58.06746292 -210.64660645]
[-44.55640793 -217.15939331]
[-30.77766609 -223.08486938]
[-16.75675583 -228.41207886]
[-2.51963925 -233.13113403]
[11.90732002 -237.23332214]
[26.49740601 -240.71102905]
[41.22360229 -243.55780029]
[56.05863953 -245.76840210]
[70.97504425 -247.33871460]
[85.94519806 -248.26583862]
[100.94137573 -248.54804993]
[115.93581390 -248.18484497]
[130.90074158 -247.17686462]
[145.80844116 -245.52600098]
[160.63131714 -243.23530579]
[175.34193420 -240.30902100]
[189.91300964 -236.75254822]
[204.31761169 -232.57250977]
[218.52902222 -227.77661133]
[232.52095032 -222.37374878]
[246.26748657 -216.37391663]
[259.74316406 -209.78823853]
[272.92303467 -202.62890625]
[280.64337158 -215.48954773]
[288.36373901 -228.35020447]
[296.08407593 -241.21084595]
[303.80444336 -254.07148743]
[311.52478027 -266.93212891]
[319.24514771 -279.79278564]
[326.96548462 -292.65341187]
[334.68585205 -305.51406860]
[342.40618896 -318.37469482]
[330.53417969 -327.57208252]
[319.83334351 -338.10906982]
[310.45385742 -349.83773804]
[302.52743530 -362.59344482]
[296.16534424 -376.19714355]
[291.45690918 -390.45779419]
[288.46820068 -405.17529297]
[287.24118042 -420.14294434]
[287.79312134 -435.15066528]
[290.11621094 -449.98776245]
[294.17785645 -464.44595337]
[299.92108154 -478.32226562]
[307.26519775 -491.42187500]
[316.10714722 -503.56094360]
[326.32278442 -514.56896973]
[337.76870728 -524.29150391]
[350.28421021 -532.59197998]
[363.69363403 -539.35394287]
[377.80868530 -544.48242188]
[392.43124390 -547.90545654]
[407.35601807 -549.57495117]
[422.37350464 -549.46746826]
[437.27288818 -547.58453369]
[451.84494019 -543.95263672]
[465.88516235 -538.62261963]
[479.19644165 -531.66943359]
[491.59185791 -523.19067383]
[502.89746094 -513.30535889]
[512.95452881 -502.15222168]
[521.62182617 -489.88787842]
[528.77770996 -476.68447876]
[534.32171631 -462.72741699]
[538.17602539 -448.21255493]
[540.28656006 -433.34375000]
[540.62365723 -418.32965088]
[539.18255615 -403.38110352]
[535.98352051 -388.70788574]
[531.07147217 -374.51608276]
[524.51531982 -361.00482178]
[516.40716553 -348.36386108]
[506.86077881 -336.77062988]
[496.01022339 -326.38787842]
[484.00778198 -317.36135864]
[471.02197266 -309.81781006]
[457.23510742 -303.86309814]
[442.84069824 -299.58084106]
[428.04086304 -297.03115845]
[413.04333496 -296.24984741]
[398.05865479 -297.24783325]
[383.29721069 -300.01116943]
[368.96621704 -304.50100708]
[355.26684570 -310.65435791]
[347.54647827 -297.79370117]
[339.82614136 -284.93307495]
[332.10580444 -272.07241821]
[324.38543701 -259.21179199]
[316.66510010 -246.35113525]
[308.94473267 -233.49049377]
[301.22439575 -220.62985229]
[293.50402832 -207.76919556]
[285.78369141 -194.90855408]
[298.29928589 -186.64268494]
[310.44769287 -177.84600830]
[322.20639038 -168.53483582]
[333.55361938 -158.72639465]
[344.46835327 -148.43884277]
[354.93038940 -137.69125366]
[364.92034912 -126.50350952]
[374.41973877 -114.89633942]
[383.41098022 -102.89122009]
[391.87741089 -90.51039886]
[399.80334473 -77.77680206]
[407.17410278 -64.71399689]
[413.97604370 -51.34618378]
[420.19659424 -37.69810867]
[425.82421875 -23.79505157]
[430.84848022 -9.66275501]
[435.26007080 4.67261314]
[439.05087280 19.18450546]
[442.21380615 33.84604645]
[444.74304199 48.63009262]
[446.63391113 63.50926208]
[447.88287354 78.45600891]
[448.48764038 93.44264221]
[448.44708252 108.44142151]
[447.76129150 123.42456818]
[446.43154907 138.36433411]
[444.46026611 153.23307800]
[441.85113525 168.00321960]
[438.60897827 182.64744568]
[434.73977661 197.13864136]
[430.25073242 211.44993591]
[425.15011597 225.55487061]
[419.44741821 239.42729187]
[413.15319824 253.04153442]
[406.27905273 266.37237549]
[398.83776855 279.39514160]
[390.84310913 292.08569336]
[382.30987549 304.42056274]
[373.25384521 316.37689209]
[363.69183350 327.93252563]
[353.64154053 339.06610107]
[343.12155151 349.75698853]
[332.15133667 359.98535156]
[320.75125122 369.73229980]
[308.94238281 378.97976685]
[296.74661255 387.71063232]
[284.18649292 395.90872192]
[271.28530884 403.55883789]
[258.06695557 410.64685059]
[244.55587769 417.15963745]
[230.77713013 423.08508301]
[216.75621033 428.41226196]
[202.51908875 433.13131714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[91 161]
[92 160]
[93 159]
[94 158]
[95 157]
[96 156]
[97 155]
[98 154]
[99 153]
[100 152]
] def

init

% Start Annotations
91 161 0.0 1 colorpair
92 160 0.16 1 colorpair
93 159 0.0 1 colorpair
94 158 0.0 1 colorpair
95 157 0.0 1 colorpair
96 156 0.0 1 colorpair
97 155 0.0 1 colorpair
98 154 0.0 1 colorpair
99 153 0.16 0.6 colorpair
100 152 0.0 0.6 colorpair

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
92 cmark
99 153 1 gmark
99 cmark
153 cmark
100 152 1 gmark

% End Annotations
showpage
end
%%EOF
