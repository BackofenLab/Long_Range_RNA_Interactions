%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Mon Jun 17 09:14:07 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 -140 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

/ConsLegend { % xloc yloc tics range ConsLegend -> []
  /STR 8 string def
  /colshift 0.16 def
  /sep 0.1 def
  /range exch def
  % precompute number of tics but leave one tics for range numbers
  dup /tics exch dup 1 le { pop 42 } if def
  /lasttick exch dup 1 eq { pop 1.0 } { dup 1 gt { cvi } if  } ifelse def
  
  gsave
    /Helvetica findfont 10 scalefont setfont
    xmin xmax add size sub 2 div
    ymin ymax add size sub 2 div translate
    size dup scale
    translate
    0.015 dup scale
    % legend lines
    gsave 
    0.5 setgray
    0.05 setlinewidth
    newpath
    -1.5 2.5 moveto 10.1 2.5 lineto
    stroke
    newpath
    -1.5 1.1 moveto 10.1 1.1 lineto
    stroke
    newpath
    -1.5 2.5 moveto -1.5 -5 -6 sep mul add lineto
    stroke
    newpath
    10.1 1.1 moveto 10.1 -5 -6 sep mul add lineto
    stroke
    newpath
    -0.1 1.1 moveto -0.1 -5 -6 sep mul add lineto
    stroke
    newpath
    -0.1 -5 -6 sep mul add moveto 10.1 -5 -6 sep mul add lineto
    stroke
    grestore
    % color gradients
      6 -1 1
      {
        % get current number of different base pairs
        dup 1 sub 6 exch sub /curnum exch STR cvs def
        % compute y-position
        dup 6 sub dup sep mul add /ypos exch def
        % draw number of different base pairs
        -1 ypos moveto gsave 0.1 dup scale curnum show grestore
        % compute current color
        6 exch sub colshift mul
        /curcol exch def
        % draw gradient for counter examples
        gsave
        10 tics 1 add div 1 scale
        0 1 tics
        {
            dup ypos moveto
            tics div range mul 1 exch sub
            curcol exch hsb
            1 0 rlineto 0 1 rlineto -1 0 rlineto closepath fill
        } for
        grestore
      } for
    0 setgray
    % legend labels
    0.1 1.2 sep add moveto (0) gsave 0.1 dup scale show grestore
    9.4 1.2 sep add moveto lasttick STR cvs gsave 0.1 dup scale show grestore
    1 3 moveto (counter examples) gsave 0.1 dup scale show grestore
    -2 -4.5 moveto 90 rotate (base pairs)  gsave 0.1 dup scale show grestore
%    gsave 0.1 dup scale dup stringwidth pop -2 div 0 rmoveto show grestore
  grestore
} bind def

%%EndProlog

% data start here
/cutpoint 110 def
/sequence { (\
UUAGUGCAGUUUAAACAGUUUUUUAGAACGGAAGAUAACCAUGACUAAAAAACCAGGAGGGCCCGGUAAAAACCGGGCUAUCAAUAUGCUGAAACGCGGCCUACCCCGCG UAGAGGAGACCCCGCAUUUGCAUCAAACAGCAUAUUGACACCUGGGAAUAGACUGGGAGAUCUUCUGCUCUAUCUCAACAUCAGCUACUAGGCACAGAGCGCCGAAGUAUGUAGCUGGUGGUGAGGAAGAACACAGGAUCU\
) } def
/len { sequence length } bind def

/coor [
[349.56738281 507.62118530]
[334.64498901 506.09716797]
[326.42532349 493.54977417]
[330.98873901 479.26077271]
[344.96127319 473.80041504]
[330.07391357 473.33612061]
[322.73443604 459.32031250]
[310.16622925 451.13250732]
[297.59802246 442.94470215]
[285.02981567 434.75692749]
[272.46160889 426.56912231]
[259.89340210 418.38131714]
[247.32518005 410.19351196]
[241.08641052 414.95901489]
[233.44070435 417.69580078]
[225.05491638 417.99291992]
[216.71354675 415.66021729]
[209.24526978 410.76089478]
[203.44111633 403.61975098]
[191.86444092 413.15814209]
[180.28778076 422.69650269]
[168.71110535 432.23489380]
[157.13442993 441.77325439]
[145.55775452 451.31164551]
[133.98109436 460.85003662]
[122.40441132 470.38839722]
[123.65795135 487.26916504]
[114.68335724 501.42480469]
[99.19149780 507.37286377]
[83.36991882 502.95016479]
[71.91258240 512.63159180]
[72.14744568 528.26739502]
[62.23680878 540.36340332]
[46.86017227 543.20819092]
[33.27790833 535.45861816]
[27.90315437 520.77374268]
[33.27369690 506.08731079]
[46.85373688 498.33380127]
[62.23118973 501.17422485]
[73.68852997 491.49282837]
[71.47945404 478.34127808]
[76.08790588 465.71185303]
[86.41277313 456.93365479]
[99.83155823 454.37643433]
[112.86603546 458.81173706]
[124.44271088 449.27334595]
[136.01937866 439.73498535]
[147.59605408 430.19659424]
[159.17272949 420.65820312]
[170.74938965 411.11984253]
[182.32606506 401.58145142]
[193.90274048 392.04309082]
[196.40550232 377.25335693]
[188.61174011 364.43707275]
[180.81797791 351.62075806]
[173.02421570 338.80447388]
[165.23045349 325.98818970]
[151.50804138 325.50848389]
[140.09721375 317.87118530]
[134.42207336 305.36807251]
[119.60240936 303.04916382]
[104.78273773 300.73025513]
[89.96306610 298.41131592]
[75.14340210 296.09240723]
[60.32373047 293.77349854]
[45.50405884 291.45455933]
[30.68438911 289.13565063]
[15.58861637 295.54266357]
[2.65673351 285.45809937]
[5.19195175 269.25610352]
[20.58625603 263.60388184]
[33.00330734 274.31597900]
[47.82297516 276.63488770]
[62.64264679 278.95382690]
[77.46231842 281.27273560]
[92.28199005 283.59164429]
[107.10165405 285.91058350]
[121.92132568 288.22949219]
[136.74099731 290.54840088]
[140.06895447 284.63568115]
[144.95341492 279.71826172]
[140.72743225 265.32586670]
[136.50143433 250.93348694]
[132.27545166 236.54109192]
[128.04946899 222.14869690]
[123.82347870 207.75630188]
[119.59748840 193.36390686]
[115.37149811 178.97151184]
[111.14550781 164.57911682]
[106.91952515 150.18672180]
[102.69353485 135.79432678]
[82.33179474 137.11260986]
[61.96239853 126.41824341]
[48.67767715 104.50815582]
[48.47911835 76.25818634]
[40.05865479 63.84465408]
[31.63819122 51.43112183]
[23.21772766 39.01758957]
[14.79726410 26.60405731]
[-0.76973295 23.87566185]
[-9.77948093 10.89105606]
[-6.88665485 -4.64622450]
[6.19248247 -13.51818752]
[21.69831085 -10.46125412]
[30.43149757 2.71095181]
[27.21079636 18.18359375]
[35.63125992 30.59712601]
[44.05172348 43.01065826]
[52.47218704 55.42419052]
[60.89265060 67.83772278]
[67.86116791 65.06467438]
[62.31505966 51.12764359]
[64.48020172 36.28472900]
[76.25209045 45.58153915]
[81.79819489 59.51856613]
[88.76670837 56.74551392]
[86.35581970 41.94052505]
[74.22835541 31.43795204]
[75.02218628 15.41455078]
[88.12836456 6.16210461]
[103.49294281 10.77829838]
[109.32953644 25.72198296]
[101.16081238 39.52964401]
[103.57169342 54.33462906]
[118.54827881 53.49689484]
[119.29301453 38.51539230]
[111.33129883 24.17861748]
[119.99735260 10.25627327]
[136.37626648 11.07047558]
[143.61883545 25.78364182]
[134.27452087 39.26012802]
[133.52978516 54.24163055]
[142.76400757 67.43441772]
[147.46276855 81.95895386]
[147.66311646 96.38726044]
[143.82084656 109.42885590]
[136.73428345 120.04547119]
[127.43910217 127.53356934]
[117.08592987 131.56832886]
[121.31192017 145.96072388]
[125.53790283 160.35311890]
[129.76390076 174.74551392]
[133.98988342 189.13790894]
[138.21586609 203.53030396]
[142.44186401 217.92269897]
[146.66784668 232.31509399]
[150.89382935 246.70748901]
[155.11982727 261.09988403]
[159.34580994 275.49227905]
[177.11849976 283.08520508]
[184.62138367 300.60037231]
[178.04675293 318.19442749]
[185.84051514 331.01071167]
[193.63426208 343.82699585]
[201.42802429 356.64331055]
[209.22178650 369.45959473]
[227.14659119 361.76327515]
[245.15844727 366.54644775]
[255.85031128 380.73406982]
[255.51298523 397.62530518]
[268.08117676 405.81311035]
[280.64941406 414.00091553]
[293.21762085 422.18869019]
[305.78582764 430.37649536]
[318.35403442 438.56430054]
[330.92224121 446.75210571]
[346.70855713 447.80203247]
[353.14907837 461.23220825]
[365.96536255 469.02597046]
[379.01739502 476.41818237]
[392.06939697 483.81036377]
[405.12142944 491.20257568]
[418.17346191 498.59478760]
[431.22546387 505.98699951]
[444.27749634 513.37921143]
[460.09854126 513.44763184]
[467.35995483 526.45227051]
[480.41195679 533.84448242]
[496.23303223 533.91290283]
[503.49441528 546.91760254]
[516.54644775 554.30981445]
[529.59844971 561.70202637]
[545.41955566 561.77044678]
[552.68090820 574.77508545]
[565.73297119 582.16729736]
[578.78497314 589.55950928]
[591.83697510 596.95172119]
[604.88903809 604.34393311]
[620.71008301 604.41235352]
[627.97143555 617.41699219]
[641.02349854 624.80920410]
[654.07550049 632.20141602]
[667.12750244 639.59362793]
[680.17956543 646.98583984]
[693.23156738 654.37805176]
[706.28356934 661.77026367]
[719.33563232 669.16247559]
[732.38763428 676.55468750]
[745.43963623 683.94689941]
[766.00787354 676.61688232]
[784.98669434 686.82250977]
[790.07580566 707.46685791]
[803.56134033 714.03497314]
[817.04687500 720.60308838]
[831.25433350 714.07000732]
[846.32360840 718.24761963]
[855.13934326 731.16339111]
[853.53906250 746.71887207]
[842.27838135 757.56927490]
[826.67419434 758.59130859]
[814.09442139 749.30249023]
[810.47875977 734.08862305]
[796.99322510 727.52050781]
[783.50769043 720.95239258]
[776.84472656 726.29748535]
[768.77160645 729.21856689]
[760.14440918 729.37603760]
[751.88757324 726.72503662]
[744.89489746 721.52319336]
[739.93280029 714.30572510]
[737.55645752 705.83056641]
[738.04742432 696.99890137]
[724.99542236 689.60668945]
[711.94342041 682.21447754]
[698.89135742 674.82226562]
[685.83935547 667.43005371]
[672.78735352 660.03784180]
[659.73535156 652.64562988]
[646.68328857 645.25347900]
[633.63128662 637.86126709]
[620.57928467 630.46905518]
[605.69177246 630.92938232]
[597.49682617 617.39593506]
[584.44476318 610.00372314]
[571.39276123 602.61151123]
[558.34075928 595.21929932]
[545.28869629 587.82714844]
[530.40124512 588.28741455]
[522.20623779 574.75402832]
[509.15423584 567.36181641]
[496.10220337 559.96960449]
[481.21472168 560.42993164]
[473.01977539 546.89654541]
[459.96774292 539.50433350]
[445.08026123 539.96466064]
[436.88528442 526.43121338]
[423.83328247 519.03900146]
[410.78125000 511.64682007]
[397.72921753 504.25460815]
[384.67721558 496.86239624]
[371.62518311 489.47018433]
[358.57315063 482.07797241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 168]
[7 166]
[8 165]
[9 164]
[10 163]
[11 162]
[12 161]
[13 160]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[30 40]
[31 39]
[53 156]
[54 155]
[55 154]
[56 153]
[57 152]
[60 79]
[61 78]
[62 77]
[63 76]
[64 75]
[65 74]
[66 73]
[67 72]
[81 149]
[82 148]
[83 147]
[84 146]
[85 145]
[86 144]
[87 143]
[88 142]
[89 141]
[90 140]
[91 139]
[95 110]
[96 109]
[97 108]
[98 107]
[99 106]
[116 124]
[117 123]
[125 132]
[126 131]
[169 252]
[170 251]
[171 250]
[172 249]
[173 248]
[174 247]
[175 246]
[177 244]
[178 243]
[180 241]
[181 240]
[182 239]
[184 237]
[185 236]
[186 235]
[187 234]
[188 233]
[190 231]
[191 230]
[192 229]
[193 228]
[194 227]
[195 226]
[196 225]
[197 224]
[198 223]
[199 222]
[202 214]
[203 213]
[204 212]
] def

init

% Start Annotations
1 110 9  0 0.9 0.2 omark
112 252 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
